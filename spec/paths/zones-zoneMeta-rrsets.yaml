get:
  tags:
    - Records
  summary: List all RRSets in a Zone
  description: |
    This call provides a list of all RRSets in a zone, or if specific query parameters are used, a list of the RRSets in a zone that match the provided criteria.
    
    ## Query Parameter (q)
    
    The `q` parameter allows filtering RRSets using various operators. Multiple operators can be combined using the `+` separator.
    
    **Query Operators:**
    
    - **TTL**: Exact match for the TTL value. Only valid for RECORDS RRSets type; ignored for other kinds of RRSets.
    - **Owner**: Partial match to an owner name. Valid for all RRSets.
    - **Value**: Partial match for the rdata for a resource record. Only valid for the RECORDS RRSet type; ignored for other kinds of RRSets.
    - **Kind** (defaults to ALL): The kind of RRSets or Pools that will be returned. One or more types can be specified if separated by commas.
    
    **Kind Values:**
    
    | Value | Meaning |
    |-------|---------|
    | ALL | All pools and records (same as RECORDS,POOLS) |
    | RECORDS | Only resource Records |
    | POOLS | All Pools |
    | RD_POOLS | Only RD Pools (Resource Distribution Pools) |
    | DIR_POOLS | Only Directional Pools |
    | SB_POOLS | Only Simple Load Balancing Pools |
    | TC_POOLS | Only Traffic Controller Pools |
    
    **Query Examples:**
    - `kind:RD_POOLS` - Return all RD Pools in the zone
    - `ttl:300+owner:test+kind:RECORDS` - Records with TTL 300 and owner containing "test"
    - `kind:RECORDS,RD_POOLS` - Both records and RD Pools
    - `owner:mail+kind:POOLS` - All pools with owner containing "mail"
  operationId: listRrsetsInZone
  parameters:
    - $ref: '../components/parameters/ZoneName.yaml'
    - $ref: '../components/parameters/QueryParams.yaml'
    - $ref: '../components/parameters/Offset.yaml'
    - $ref: '../components/parameters/Limit.yaml'
    - $ref: '../components/parameters/Sort.yaml'
      description: |
        The sort column used to define the order of the list. Valid values are:
        - OWNER (default)
        - TTL
        - TYPE (specifies the Record type)
      example: "TYPE"
    - $ref: '../components/parameters/Reverse.yaml'
    - $ref: '../components/parameters/SystemGeneratedStatus.yaml'
  responses:
    '200':
      description: List of RRSets in the zone
      content:
        application/json:
          schema:
            $ref: '../components/schemas/RRSetsList.yaml'
          examples:
            List all RRSets:
              summary: List all RRSets for a Zone
              value:
                zoneName: "primary-example.com."
                rrSets:
                  - ownerName: "arecord.primary-example.com."
                    rrtype: "A (1)"
                    ttl: 500
                    rdata:
                      - "1.1.1.1"
                  - ownerName: "arecord.primary-example.com1.primary-example.com."
                    rrtype: "A (1)"
                    ttl: 500
                    rdata:
                      - "1.1.1.1"
                  - ownerName: "arecord.primarytest.com.primary-example.com."
                    rrtype: "A (1)"
                    ttl: 500
                    rdata:
                      - "2.2.2.2"
                  - ownerName: "arecord.primarytest.com.primary-example.com."
                    rrtype: "AAAA (28)"
                    ttl: 500
                    rdata:
                      - "fdda:5cc1:23:4:0:0:0:1f"
                queryInfo:
                  q: "kind:ALL"
                  sort: "OWNER"
                  reverse: false
                  limit: 100
                resultInfo:
                  totalCount: 4
                  offset: 0
                  returnedCount: 4
            List RRSets with Query Parameters:
              summary: List RRSets with Query Parameters and systemGeneratedStatus
              value:
                zoneName: "primary-example.com."
                rrSets:
                  - ownerName: "srvrecord.primarytest.com.primary-example.com."
                    rrtype: "SRV (33)"
                    ttl: 500
                    rdata:
                      - "1 5 81 test.primarytest.com."
                    systemGenerated:
                      - false
                      - false
                  - ownerName: "spfrecord.primarytest.com.primary-example.com."
                    rrtype: "SPF (99)"
                    ttl: 500
                    rdata:
                      - "\"spfrecorddata\""
                    systemGenerated:
                      - false
                  - ownerName: "rprecord.primarytest.com.primary-example.com."
                    rrtype: "RP (17)"
                    ttl: 500
                    rdata:
                      - "mail1.primary-example.com. text1.primary-example.com."
                    systemGenerated:
                      - false
                      - true
                  - ownerName: "ptrrecord.primarytest.com.primary-example.com."
                    rrtype: "PTR (12)"
                    ttl: 500
                    rdata:
                      - "test1.primarytest.com.primary-example.com."
                    systemGenerated:
                      - false
                queryInfo:
                  q: "ttl:300+owner:test+kind:RECORDS"
                  sort: "TYPE"
                  reverse: true
                  limit: 100
                resultInfo:
                  totalCount: 4
                  offset: 0
                  returnedCount: 4
    '400':
      $ref: '../components/responses/Error400.yaml'
    '401':
      $ref: '../components/responses/Error401.yaml'
    '403':
      $ref: '../components/responses/Error403.yaml'
    '404':
      $ref: '../components/responses/Error404.yaml'
    '5XX':
      $ref: '../components/responses/Error5xx.yaml'

patch:
  tags:
    - Records
  summary: Create Zone via BIND File Upload
  description: |
    This call creates a Zone by uploading a BIND file containing the zone data. The Zone details must be attached in a BIND file and sent as multipart/form-data.
    
    **New Update**: The BIND Upload of zone feature now supports the usage of whitespaces as a hostname in the BIND file. Referring to RFC-1035, newly supported behavior is described as follows - "If an entry for an RR begins with a blank, then the RR is assumed to be owned by the last stated owner. If an RR entry begins with a <domain-name>, then the owner name is reset."
    
    **Important Notes:**
    - Do not add any JSON content or BIND file content as text in the request body
    - The file must be uploaded using multipart/form-data
  operationId: createZoneViaBindUpload
  parameters:
    - $ref: '../components/parameters/ZoneName.yaml'
  requestBody:
    required: true
    content:
      multipart/form-data:
        schema:
          type: object
          properties:
            file:
              type: string
              format: binary
              description: |
                The BIND file containing zone data. The file should contain DNS records in BIND format.
                
                **BIND File Format:**
                - Each line represents a DNS record
                - Records can span multiple lines using parentheses
                - Comments start with semicolon (;)
                - $ORIGIN directive sets the zone origin
                - Records without owner name inherit from the last stated owner
                - Records with owner name reset the owner context
              example: |
                ;File created: 12/04/2019 12:07
                ;Record count: 20
                $ORIGIN upload-test.com.
                @    86400    IN    SOA udns1.ultradns.net. BindZone\.testzone.example.biz. (
                        2019041222    ;Serial
                        86400        ;Refresh
                        86400        ;Retry
                        86400        ;Expire
                        86400        ;Minimum
                    )
                owner3    300    IN    NS    ns1.nameserver.com.
                @    86400    IN    NS    udns1.ultradns.net.
                @    86400    IN    NS    udns2.ultradns.net.
                owner1    100    IN    A    12.12.12.12
                owner4    400    IN    CNAME    cname1.com.
                owner13   800    IN    MB    mail2.upload-test.com.
                owner14   900    IN    WKS    12.12.14.12 6 26
                owner8    500    IN    PTR    test.addr2.com.
                owner7    403    IN    HINFO    "32bits" "windows"
                owner6    402    IN    MX    10 mail2.upload-test.com.
                owner5    401    IN    TXT    "abcdefghijklmnopqrstabcdefghijklmnopqrst"
                owner12   700    IN    RP    mail1.addr.arpa. text1.addr.arpa.
                owner15   1000   IN    KEY    33 44 44 test
                owner2    200    IN    AAAA    2001:db8:85a3:0:0:8a2e:370:7334
                owner16   1100   IN    NXT    test1.upload-test.com. SSHFP
                owner11   602    IN    SRV    1 5 81 test.addr.com.
                owner9    600    IN    NAPTR    100 6 "u" "E2U+smtp" "!^.*$!mailto:information@addr.com!i" .
                owner17   1200   IN    SSHFP    32 44 AD
                owner10   601    IN    SPF    "aaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaa" "x2rgthhyuiy"
        encoding:
          file:
            contentType: text/plain
  responses:
    '202':
      description: BIND file upload accepted for processing
      $ref: '../components/responses/AcceptedGeneric.yaml'
    '400':
      $ref: '../components/responses/Error400.yaml'
    '401':
      $ref: '../components/responses/Error401.yaml'
    '403':
      $ref: '../components/responses/Error403.yaml'
    '404':
      $ref: '../components/responses/Error404.yaml'
    '5XX':
      $ref: '../components/responses/Error5xx.yaml'
