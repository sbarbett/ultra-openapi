get:
  tags:
    - Records
  summary: List all RRSets of a Type for an Owner
  description: |
    This call returns a list of RRSets of a specified type for the Owner Name provided in the call.
    
    The identified Type can be any of the following:
    - A DNS record-type name (A, TXT, AAAA, SRV)
    - A number corresponding to a resource record type (from 1 to 65535)
    - The special reserved word "ANY", which will return all RRSets for the specified owner name
    
    Owner name can be a relative name (does not include the zone name), or an absolute name (includes the zone name).
    
    **Important Notes:**
    - Using a query parameter with an owner name is automatically a string-match search; it will return all owner names that contain the specified string
    - When the owner name is specified as part of the URI, the search will return only the RRSets for the owner name that exactly matches the specified name
  operationId: listRrsetsByTypeAndOwner
  parameters:
    - $ref: '../components/parameters/ZoneName.yaml'
    - $ref: '../components/parameters/RecordType.yaml'
    - $ref: '../components/parameters/OwnerName.yaml'
    - $ref: '../components/parameters/SystemGeneratedStatus.yaml'
  responses:
    '200':
      description: List of RRSets of the specified type for the specified owner
      content:
        application/json:
          schema:
            $ref: '../components/schemas/RRSetsList.yaml'
          examples:
            List A Records for Owner:
              summary: List all A records for a specific owner
              value:
                zoneName: "domain.name."
                rrSets:
                  - ownerName: "test.domain.name."
                    rrtype: "A (1)"
                    ttl: 300
                    rdata:
                      - "9.8.7.6"
                queryInfo:
                  q: "kind:RECORDS"
                  sort: "OWNER"
                  reverse: false
                  limit: 100
                resultInfo:
                  totalCount: 1
                  offset: 0
                  returnedCount: 1
            List All Records for Owner:
              summary: List all RRSets for a specific owner using ANY type
              value:
                zoneName: "domain.name."
                rrSets:
                  - ownerName: "test.domain.name."
                    rrtype: "A (1)"
                    ttl: 300
                    rdata:
                      - "9.8.7.6"
                  - ownerName: "test.domain.name."
                    rrtype: "TXT (16)"
                    ttl: 300
                    rdata:
                      - "The quick brown fox jumped over the lazy dog"
                      - "Here is another TXT record in the RRSet"
                queryInfo:
                  q: "kind:RECORDS"
                  sort: "OWNER"
                  reverse: false
                  limit: 100
                resultInfo:
                  totalCount: 2
                  offset: 0
                  returnedCount: 2
            List Records with System Generated Status:
              summary: List records with systemGenerated attribute
              value:
                zoneName: "domain.name."
                rrSets:
                  - ownerName: "test.domain.name."
                    rrtype: "A (1)"
                    ttl: 300
                    rdata:
                      - "9.8.7.6"
                    systemGenerated:
                      - false
                  - ownerName: "test.domain.name."
                    rrtype: "TXT (16)"
                    ttl: 300
                    rdata:
                      - "The quick brown fox jumped over the lazy dog"
                      - "Here is another TXT record in the RRSet"
                    systemGenerated:
                      - false
                      - false
                queryInfo:
                  q: "kind:RECORDS"
                  sort: "OWNER"
                  reverse: false
                  limit: 100
                resultInfo:
                  totalCount: 2
                  offset: 0
                  returnedCount: 2
            List Apex Alias Record:
              summary: List APEXALIAS record for domain apex
              description: |
                Shows an Apex Alias record configured at the zone apex. Note that the rrtype 
                shows "APEXALIAS (65282)" where 65282 is the numeric type code for Apex Alias records.
              value:
                zoneName: "ultratest.biz."
                rrSets:
                  - ownerName: "ultratest.biz."
                    rrtype: "APEXALIAS (65282)"
                    ttl: 300
                    rdata:
                      - "mywebfront.mysecretcdn.com."
                queryInfo:
                  sort: "OWNER"
                  reverse: false
                  limit: 100
                resultInfo:
                  totalCount: 1
                  offset: 0
                  returnedCount: 1
            List SSHFP Record:
              summary: List SSHFP record for SSH fingerprint verification
              description: |
                Shows an SSHFP record used for SSH key verification. The rrtype shows "SSHFP (44)" 
                where 44 is the numeric type code for SSHFP records. The rdata contains the algorithm, 
                type, and fingerprint values.
              value:
                zoneName: "ultratest.biz."
                rrSets:
                  - ownerName: "www.sshfp.com.ultratest.biz."
                    rrtype: "SSHFP (44)"
                    ttl: 100
                    rdata:
                      - "1 2 6E657573746172"
                queryInfo:
                  sort: "OWNER"
                  reverse: false
                  limit: 100
                resultInfo:
                  totalCount: 1
                  offset: 0
                  returnedCount: 1
            List DS Record:
              summary: List DS record for DNSSEC delegation signing
              description: |
                Shows a DS record used for DNSSEC delegation signing. The rrtype shows "DS (43)" 
                where 43 is the numeric type code for DS records. The rdata contains the key tag, 
                algorithm, digest type, and digest values.
              value:
                zoneName: "ultratest.biz."
                rrSets:
                  - ownerName: "www.ultradstest.com.ultratest.biz."
                    rrtype: "DS (43)"
                    ttl: 800
                    rdata:
                      - "1000 8 1 A94A8FE5CCB19BA61C4C0873D391E987982FBBD3"
                queryInfo:
                  sort: "OWNER"
                  reverse: false
                  limit: 100
                resultInfo:
                  totalCount: 1
                  offset: 0
                  returnedCount: 1
            List RD Pool A Record:
              summary: List A record with Resource Distribution Pool
              description: |
                Shows an A record configured with an RD Pool profile. The profile contains
                the pool configuration including ordering method and description.
              value:
                zoneName: "andria.com."
                rrSets:
                  - ownerName: "redredrobin.andria.com."
                    rrtype: "A (1)"
                    ttl: 86400
                    rdata:
                      - "198.16.1.22"
                      - "192.168.2.56"
                    profile:
                      "@context": "http://schemas.ultradns.com/RDPool.jsonschema"
                      order: "ROUND_ROBIN"
                      description: "T. migratorius"
                queryInfo:
                  q: "kind:POOLS"
                  sort: "OWNER"
                  reverse: false
                  limit: 100
                resultInfo:
                  totalCount: 1
                  offset: 0
                  returnedCount: 1
    '400':
      $ref: '../components/responses/Error400.yaml'
    '401':
      $ref: '../components/responses/Error401.yaml'
    '403':
      $ref: '../components/responses/Error403.yaml'
    '404':
      $ref: '../components/responses/Error404.yaml'
    '5XX':
      $ref: '../components/responses/Error5xx.yaml'

post:
  tags:
    - Records
  summary: Create RRSet for an Owner
  description: |
    The Create RRSet for an Owner call requires you to send an Resource Record Set (RRSet) DTO with the call. However, the ownerName and rrtype fields are not required because they are specified in the URI. If the DTO you send does include them, they will be ignored.
  operationId: createRrsetForOwner
  parameters:
    - $ref: '../components/parameters/ZoneName.yaml'
    - $ref: '../components/parameters/RecordType.yaml'
    - $ref: '../components/parameters/OwnerName.yaml'
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: '../components/schemas/RRSet.yaml'
        examples:
          TLSA Record:
            summary: Create a TLSA record
            description: |
              Creates a TLSA record using the documented example payload.
              Body must include an RRSet DTO; TLSA values are provided in BIND rdata format.
            value:
              ttl: 300
              rdata:
                - "1 0 0 82003ba34942dc74"
          SVCB Alias Record:
            summary: Create an SVCB record in Alias mode
            description: |
              Creates a Service Binding record with a priority of 0 to alias the owner name to another
              service. Alias mode requires an empty SvcParams list and prevents the record from carrying
              additional parameters.
            value:
              ttl: 300
              rdata:
                - "0 target.example.com."
              serviceBinding:
                svcPriority: 0
                targetName: "target.example.com."
                svcParams: []
          HTTPS Record:
            summary: Create an HTTPS record in Service mode
            description: |
              Creates an HTTPS Service Binding record that directs clients to use alternative endpoints
              and protocols. Service mode requires a non-zero SvcPriority and supports ordered SvcParams
              for ALPN and IP hints.
            value:
              ttl: 300
              rdata:
                - "1 . alpn=h3,h3-29,h2 ipv4hint=104.16.132.229,104.16.33.229 ipv6hint=2606:4700::6810:84e5,2606:4700::6810:85e5"
              serviceBinding:
                svcPriority: 1
                targetName: "."
                svcParams:
                  - name: "alpn"
                    value: "h3,h3-29,h2"
                  - name: "ipv4hint"
                    value: "104.16.132.229,104.16.33.229"
                  - name: "ipv6hint"
                    value: "2606:4700::6810:84e5,2606:4700::6810:85e5"
          CAA Record:
            summary: Create a CAA record for certificate authority authorization
            description: |
              Creates a Certification Authority Authorization (CAA) record that allows domain name holders
              to authorize specific certificate authorities to issue certificates for the domain. CAA records
              help prevent unauthorized certificate issuance and provide additional security controls.
              
              **CAA Record Format:** "flags tag value"
              - **Flags**: Unsigned integer 0-255 (0=non-critical, 1=critical)
              - **Tag**: issue, issuewild, issuemail, issuevmc, or iodef
              - **Value**: Domain name or URL depending on tag type
              
              **Common Tags:**
              - **issue**: Authorizes CA to issue certificates
              - **issuewild**: Authorizes CA to issue wildcard certificates  
              - **iodef**: URL for reporting invalid certificate requests
            value:
              ttl: 300
              rdata:
                - "0 issue \"ca.example.net\""
                - "0 iodef \"mailto:security@example.com\""
          A Record:
            summary: Create an A-type RRSet
            value:
              ttl: 300
              rdata:
                - "1.2.3.4"
          AAAA Record:
            summary: Create an AAAA-type RRSet
            value:
              ttl: 300
              rdata:
                - "2001:db8::1"
          MX Record:
            summary: Create an MX-type RRSet
            value:
              ttl: 3600
              rdata:
                - "10 mail1.example.com."
                - "20 mail2.example.com."
          TXT Record:
            summary: Create a TXT-type RRSet
            value:
              ttl: 3600
              rdata:
                - "\"v=spf1 include:_spf.google.com ~all\""
          CNAME Record:
            summary: Create a CNAME-type RRSet
            value:
              ttl: 300
              rdata:
                - "www.example.com."
          SRV Record:
            summary: Create an SRV-type RRSet
            value:
              ttl: 300
              rdata:
                - "1 5 81 test.example.com."
          Apex Alias Record:
            summary: Create an APEXALIAS-type RRSet for domain apex
            description: |
              Apex Alias provides CNAME functionality at the domain apex. 
              
              **Important Constraints:**
              - Can only be created at the apex of the domain (ownerName must match zoneName)
              - Only one Apex Alias record can be configured per zone
              - Cannot be created on signed zones
              - Cannot coexist with both A and AAAA records at the zone apex
              - pointsTo must be a fully qualified domain name
              - pointsTo cannot be the same as the zone apex
            value:
              ttl: 300
              rdata:
                - "mywebfront.mysecretcdn.com."
          SSHFP Record:
            summary: Create an SSHFP-type RRSet for SSH fingerprint verification
            description: |
              Secure Shell Fingerprint (SSHFP) record identifies SSH keys associated with a host.
              Used for SSH key verification when connecting to SSH servers.
              
              **Record Format:** "algorithm type fingerprint"
              - **Algorithm**: 1=RSA, 2=DSS, 3=ECDSA, 4=Ed25519
              - **Type**: 1=SHA-1, 2=SHA-256 (hash algorithm)
              - **Fingerprint**: Hexadecimal representation of the hash result
            value:
              ttl: 100
              rdata:
                - "1 2 6E657573746172"
          DS Record:
            summary: Create a DS-type RRSet for DNSSEC delegation signing
            description: |
              Delegation Signer (DS) record is used in DNSSEC to indicate that a delegated zone 
              is digitally signed. The DS record is placed in the parent zone and points to a 
              DNSKEY record in the child zone.
              
              **Record Format:** "keytag algorithm digesttype digest"
              - **Key Tag**: Key tag value of the DNSKEY RR (integer)
              - **Algorithm**: 8=RSA/SHA-256, 13=ECDSA Curve P-256 with SHA-256
              - **Digest Type**: 1=SHA-1, 2=SHA-256
              - **Digest**: Hexadecimal string (40 characters for SHA-1, 64 for SHA-256)
            value:
              ttl: 500
              rdata:
                - "1000 8 1 A94A8FE5CCB19BA61C4C0873D391E987982FBBD3"
          RD Pool A Record:
            summary: Create an A-type RRSet with Resource Distribution Pool
            description: |
              Resource Distribution (RD) Pool for A records with multiple IP addresses.
              
              **Pool Ordering Options:**
              - **FIXED**: Records appear in the same order all the time
              - **RANDOM**: Order of the records is random on each request  
              - **ROUND_ROBIN**: The order of the records changes on each request, in order
              
              **Important Constraints:**
              - RD Pools can only be defined for RRSets of type A (1) or AAAA (28)
              - Multiple A or AAAA records for a single owner can only be defined if the owner is a pool
              - It is legal to define an RD Pool with zero or one Rdata records
            value:
              ttl: 300
              rdata:
                - "1.2.3.4"
                - "2.4.6.8"
                - "9.8.7.6"
              profile:
                "@context": "http://schemas.ultradns.com/RDPool.jsonschema"
                order: "RANDOM"
                description: "This is a great RD Pool"
          RD Pool AAAA Record:
            summary: Create an AAAA-type RRSet with Resource Distribution Pool
            description: |
              Resource Distribution (RD) Pool for AAAA records with multiple IPv6 addresses using round robin ordering.
            value:
              ttl: 300
              rdata:
                - "2001:db8::1"
                - "2001:db8::2"
                - "2001:db8::3"
              profile:
                "@context": "http://schemas.ultradns.com/RDPool.jsonschema"
                order: "ROUND_ROBIN"
                description: "IPv6 RD Pool for load balancing"
          Directional Pool with GeoIP:
            summary: Create a Directional Pool using GeoIP groups
            description: |
              Configure a Directional pool so that the first record responds to traffic from Asia or Africa
              while the second record targets the Antarctica code using an existing pool-level GeoIP group.
            value:
              rdata:
                - "txt1"
                - "txt2"
              profile:
                "@context": "http://schemas.ultradns.com/DirPool.jsonschema"
                rdataInfo:
                  - geoInfo:
                      name: "gr1"
                      codes:
                        - "ASI"
                        - "AFR"
                  - geoInfo:
                      name: "gr1"
                      isExistingGroupFromPool: true
                      codes:
                        - "ANT"
          Directional Pool with ignoreECS:
            summary: Create a Directional Pool with ECS disabled
            description: |
              Demonstrates how to disable EDNS Client Subnet processing for the pool while reusing
              the same GeoIP group for a secondary record.
            value:
              rdata:
                - "txt1"
                - "txt2"
              profile:
                "@context": "http://schemas.ultradns.com/DirPool.jsonschema"
                ignoreECS: true
                rdataInfo:
                  - geoInfo:
                      name: "gr1"
                      codes:
                        - "ASI"
                        - "AFR"
                  - geoInfo:
                      name: "gr1"
                      isExistingGroupFromPool: true
                      codes:
                        - "ANT"
          Directional Pool with Global Group:
            summary: Create a Directional Pool that reuses a global GeoIP group
            description: |
              Adds a global directional group to multiple records. The first record covers users not
              explicitly configured while the remaining records reuse the same account-level GeoIP group.
            value:
              rdata:
                - "1 11 12 target1.com"
                - "2 2 2 target2.com"
                - "3 2 2 target3.com"
              profile:
                "@context": "http://schemas.ultradns.com/DirPool.jsonschema"
                description: "srv"
                rdataInfo:
                  - allNonConfigured: true
                    ttl: 86400
                    type: "SRV"
                  - geoInfo:
                      name: "groupName"
                      isAccountLevel: true
                    ttl: 86400
                    type: "SRV"
                  - geoInfo:
                      name: "groupName"
                      isAccountLevel: true
                      isExistingGroupFromPool: true
                    ttl: 86400
                    type: "SRV"
          Directional Pool with GeoIP and Source IP:
            summary: Create a Directional Pool combining GeoIP and Source IP filters
            description: |
              Shows how to target traffic that matches both a GeoIP region and a Source IP range while
              providing an all non-configured fallback record.
            value:
              rdata:
                - "1.1.1.1"
                - "2.2.2.2"
              profile:
                "@context": "http://schemas.ultradns.com/DirPool.jsonschema"
                rdataInfo:
                  - allNonConfigured: true
                  - geoInfo:
                      name: "br"
                      codes:
                        - "BR"
                    ipInfo:
                      name: "some Ips"
                      ips:
                        - start: "200.20.0.1"
                          end: "200.20.0.10"
  responses:
    '201':
      $ref: '../components/responses/CreatedGeneric.yaml'
    '202':
      $ref: '../components/responses/AcceptedGeneric.yaml'
    '400':
      $ref: '../components/responses/Error400.yaml'
    '401':
      $ref: '../components/responses/Error401.yaml'
    '403':
      $ref: '../components/responses/Error403.yaml'
    '404':
      $ref: '../components/responses/Error404.yaml'
    '5XX':
      $ref: '../components/responses/Error5xx.yaml'

put:
  tags:
    - Records
  summary: Update an RRSet
  description: |
    This call allows you to update a set of resource records of a particular type (an RRSet) for a specified domain owner.
    
    Be sure to specify the TTL and ALL of the record information. Any resource records not included will be removed from the RRSet, and the TTL value specified at the account level for the record type (or global TTL value) will be used.
  operationId: updateRrset
  parameters:
    - $ref: '../components/parameters/ZoneName.yaml'
    - $ref: '../components/parameters/RecordType.yaml'
    - $ref: '../components/parameters/OwnerName.yaml'
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: '../components/schemas/RRSet.yaml'
        examples:
          Update A Record:
            summary: Update an A-type RRSet with multiple IPs
            value:
              ttl: 300
              rdata:
                - "1.2.3.4"
                - "5.6.7.8"
          Update MX Record:
            summary: Update an MX-type RRSet with new mail servers
            value:
              ttl: 3600
              rdata:
                - "10 mail1.example.com."
                - "20 mail2.example.com."
                - "30 mail3.example.com."
          Update TXT Record:
            summary: Update a TXT-type RRSet with new SPF record
            value:
              ttl: 3600
              rdata:
                - "\"v=spf1 include:_spf.google.com include:_spf.salesforce.com ~all\""
          Update CNAME Record:
            summary: Update a CNAME-type RRSet
            value:
              ttl: 300
              rdata:
                - "new-target.example.com."
          Update SRV Record:
            summary: Update an SRV-type RRSet with new service endpoints
            value:
              ttl: 300
              rdata:
                - "1 5 81 test1.example.com."
                - "2 5 81 test2.example.com."
          Update RD Pool A Record:
            summary: Update an A-type RRSet with Resource Distribution Pool
            description: |
              Full update (PUT) of an existing RD Pool. The RD Pool profile must be fully specified.
              All existing records will be replaced with the provided ones.
              
              **Use PUT for:**
              - Changing the order of records in the RD Pool
              - Removing records from the RD Pool
              - Full replacement of the RD Pool configuration
            value:
              ttl: 86400
              rdata:
                - "206.204.52.32"
                - "216.12.145.20"
                - "1.2.3.6"
                - "1.2.3.5"
              profile:
                "@context": "http://schemas.ultradns.com/RDPool.jsonschema"
                order: "ROUND_ROBIN"
                description: "www"
          Update Directional Pool with GeoIP:
            summary: Update a Directional Pool with multiple GeoIP groups
            description: |
              Replaces the directional pool configuration to serve different responses based on
              GeoIP groups. Records omitted from `rdata` will be deleted as part of the update.
            value:
              rdata:
                - "txt1"
                - "txt2"
              profile:
                "@context": "http://schemas.ultradns.com/DirPool.jsonschema"
                rdataInfo:
                  - geoInfo:
                      name: "gr1"
                      codes:
                        - "ASI"
                        - "AFR"
                  - geoInfo:
                      name: "gr2"
                      codes:
                        - "ANT"
                        - "EUR"
          Update Directional Pool with ignoreECS:
            summary: Update a Directional Pool while enabling ignoreECS
            description: |
              Shows how to enable the `ignoreECS` flag during a full directional pool update,
              replacing all existing directional records and GeoIP assignments.
            value:
              rdata:
                - "txt1"
                - "txt2"
              profile:
                "@context": "http://schemas.ultradns.com/DirPool.jsonschema"
                ignoreECS: true
                rdataInfo:
                  - geoInfo:
                      name: "gr1"
                      codes:
                        - "ASI"
                        - "AFR"
                  - geoInfo:
                      name: "gr2"
                      codes:
                        - "ANT"
                        - "EUR"
  responses:
    '200':
      description: RRSet updated successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "RRSet updated successfully"
          examples:
            Success Response:
              value:
                message: "RRSet updated successfully"
    '202':
      $ref: '../components/responses/AcceptedGeneric.yaml'
    '400':
      $ref: '../components/responses/Error400.yaml'
    '401':
      $ref: '../components/responses/Error401.yaml'
    '403':
      $ref: '../components/responses/Error403.yaml'
    '404':
      $ref: '../components/responses/Error404.yaml'
    '5XX':
      $ref: '../components/responses/Error5xx.yaml'

patch:
  tags:
    - Records
  summary: Partially Update an RRSet
  description: |
    This call allows you to update some of the information in a set of resource records of a particular type (an RRSet) for a specified domain owner.
    
    This differs from the Update RRSet call in two ways:
    - If you do not specify the TTL, the existing TTL will continue to be used
    - Any resource records specified will be added to the RRSet. Existing records are not modified or removed (except for A and CNAME records)
    
    **Special Case for A and CNAME Records:**
    Since only a single resource record is allowed in an A or CNAME RRSet, if you perform a partial update, you will modify the single resource record.
    
    **RD Pool Partial Update Behavior:**
    - For partial updates (PATCH) that do not affect the order or description, the profile section is not required
    - To add a record to an existing RD Pool, a partial update (PATCH) can be performed
    - To change the order of records or remove records, use full update (PUT) instead
    
    **Two Update Methods Supported:**
    1. **Regular PATCH**: Send an RRSet DTO with Content-Type: application/json
    2. **JSON PATCH**: Send JSON Patch DTOs with Content-Type: application/json-patch+json
  operationId: partiallyUpdateRrset
  parameters:
    - $ref: '../components/parameters/ZoneName.yaml'
    - $ref: '../components/parameters/RecordType.yaml'
    - $ref: '../components/parameters/OwnerName.yaml'
  requestBody:
    required: true
    content:
      application/json:
        description: |
          Regular PATCH request using RRSet DTO. Use this for simple partial updates.
          
          **Behavior:**
          - If TTL is not specified, existing TTL will be used
          - New rdata entries will be added to existing ones
          - For A and CNAME records, the single record will be modified
          - For RD Pools, new records can be added without specifying the profile
        schema:
          $ref: '../components/schemas/RRSet.yaml'
        examples:
          Partial Update A Record:
            summary: Partially update an A record (modifies the single record)
            value:
              ttl: 600
              rdata:
                - "1.2.3.4"
          Partial Update MX Record:
            summary: Partially update MX records (adds to existing records)
            value:
              rdata:
                - "30 mail3.example.com."
          Partial Update TXT Record:
            summary: Partially update TXT records (adds to existing records)
            value:
              ttl: 3600
              rdata:
                - "\"additional TXT record\""
          Partial Update RD Pool - Add Record:
            summary: Add a record to an existing RD Pool
            description: |
              Add a new record to an existing RD Pool without specifying the profile.
              The existing pool configuration (order, description) will be preserved.
            value:
              rdata:
                - "10.10.10.1"
          Partial Update RD Pool - Full Profile:
            summary: Partially update RD Pool with full profile specification
            description: |
              Update RD Pool with complete profile information. This matches the documentation
              example for partial RD Pool updates.
            value:
              ttl: 86400
              rdata:
                - "10.10.10.1"
              profile:
                "@context": "http://schemas.ultradns.com/RDPool.jsonschema"
                order: "ROUND_ROBIN"
                description: "www"
          Partial Update Directional Pool with GeoIP:
            summary: Update a Directional Pool with GeoIP force overlap enabled
            description: |
              Adjust the GeoIP coverage within a directional pool and enable `forceOverlap` so any
              overlapping codes move from other records to this one during the update.
            value:
              rdata:
                - "txt2"
              profile:
                "@context": "http://schemas.ultradns.com/DirPool.jsonschema"
                rdataInfo:
                  - geoInfo:
                      name: "gr2"
                      codes:
                        - "ANT"
                        - "EUR"
                        - "ASI"
                      forceOverlap: true
          Partial Update Directional Pool with ignoreECS:
            summary: Update a Directional Pool to toggle ECS handling
            description: |
              Demonstrates a directional pool partial update that flips the `ignoreECS` flag while
              redefining GeoIP codes with force overlap enabled for the targeted record.
            value:
              rdata:
                - "txt2"
              profile:
                "@context": "http://schemas.ultradns.com/DirPool.jsonschema"
                ignoreECS: false
                rdataInfo:
                  - geoInfo:
                      name: "gr2"
                      codes:
                        - "ANT"
                        - "EUR"
                        - "ASI"
                      forceOverlap: true
      application/json-patch+json:
        description: |
          JSON PATCH request using RFC 6902 compliant JSON Patch DTOs. Use this for complex partial updates with multiple operations.
          
          **Features:**
          - Support for add, replace, remove, and move operations
          - Can update specific values within rdata entries using double indexing
          - Can perform multiple operations in a single request
        schema:
          type: array
          items:
            $ref: '../components/schemas/JSONPatch.yaml'
        examples:
          Update MX Records with JSON Patch:
            summary: Update specific values within MX records using double indexing
            value:
              - op: "replace"
                path: "/rdata/0/1"
                value: "new.mail.server.biz."
              - op: "replace"
                path: "/rdata/1"
                value: "30 new3.mail.server.biz."
          Add and Remove Records with JSON Patch:
            summary: Add new records and remove existing ones
            value:
              - op: "add"
                path: "/rdata/2"
                value: "40 mail4.example.com."
              - op: "remove"
                path: "/rdata/0"
          Update TTL with JSON Patch:
            summary: Update only the TTL value
            value:
              - op: "replace"
                path: "/ttl"
                value: 7200
          Update RD Pool Order with JSON Patch:
            summary: Update RD Pool ordering method using JSON Patch
            description: |
              Change the ordering method of an RD Pool from one type to another
              while preserving other profile settings.
            value:
              - op: "replace"
                path: "/profile/order"
                value: "FIXED"
          Add Record to RD Pool with JSON Patch:
            summary: Add a new IP address to an existing RD Pool
            description: |
              Add a new record to an RD Pool without modifying existing records.
              This demonstrates the PATCH capability for adding records to pools.
            value:
              - op: "add"
                path: "/rdata/-"
                value: "10.10.10.1"
          Remove Record from RD Pool with JSON Patch:
            summary: Remove a specific record from an RD Pool by index
            description: |
              Remove a record from an RD Pool using its array index position.
              You need to know the position of the rdata entry you want to remove.
              
              **Important Note:** This is the only way to remove individual records from an RD Pool.
              The index is 0-based, so `/rdata/0` removes the first record, `/rdata/1` removes the second, etc.
            value:
              - op: "remove"
                path: "/rdata/0"
          Remove Multiple Records from RD Pool:
            summary: Remove multiple records from an RD Pool in a single operation
            description: |
              Remove multiple records from an RD Pool by specifying their index positions.
              
              **Important:** When removing multiple records, remove them in reverse order (highest index first)
              to avoid index shifting issues. Alternatively, remove them all in one operation as shown.
            value:
              - op: "remove"
                path: "/rdata/2"
              - op: "remove"
                path: "/rdata/0"
          Update RD Pool Profile with JSON Patch:
            summary: Update multiple RD Pool profile fields using JSON Patch
            description: |
              Update both the ordering method and description of an RD Pool
              in a single JSON Patch operation.
            value:
              - op: "replace"
                path: "/profile/order"
                value: "RANDOM"
              - op: "replace"
                path: "/profile/description"
                value: "Updated to random distribution for better load balancing"
  responses:
    '200':
      description: RRSet partially updated successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "RRSet partially updated successfully"
          examples:
            Success Response:
              value:
                message: "RRSet partially updated successfully"
    '202':
      $ref: '../components/responses/AcceptedGeneric.yaml'
    '400':
      $ref: '../components/responses/Error400.yaml'
    '401':
      $ref: '../components/responses/Error401.yaml'
    '403':
      $ref: '../components/responses/Error403.yaml'
    '404':
      $ref: '../components/responses/Error404.yaml'
    '5XX':
      $ref: '../components/responses/Error5xx.yaml'

delete:
  tags:
    - Records
  summary: Delete All RRSets for an Owner and Type
  description: |
    This call allows you to delete all resource records of a particular type (an RRSet) for a specified domain owner.
    
    **Important Note:**
    The Delete All RRSets call does not allow for the use of ANY as the {type} entry.
  operationId: deleteAllRrsetsForOwnerAndType
  parameters:
    - $ref: "../components/parameters/ZoneName.yaml"
    - $ref: "../components/parameters/RecordType.yaml"
    - $ref: "../components/parameters/OwnerName.yaml"
  responses:
    "204":
      description: RRSets deleted successfully
    "202":
      $ref: "../components/responses/AcceptedGeneric.yaml"
    "400":
      $ref: "../components/responses/Error400.yaml"
    "401":
      $ref: "../components/responses/Error401.yaml"
    "403":
      $ref: "../components/responses/Error403.yaml"
    "404":
      $ref: "../components/responses/Error404.yaml"
    "5XX":
      $ref: "../components/responses/Error5xx.yaml"
