openapi: 3.0.3
info:
  title: UltraDNS API Documentation
  description: |
    # Introduction

    The UltraDNS REST API lets you manage DNS resources programmatically and test changes in a non-production environment.

    ## What you can do
    - Create and test API calls in a controlled test environment that mimics production.
    - Manage UltraDNS objects using REST requests.
    - Use the API as an alternative to the UltraDNS Managed Services Portal.

    ## Base URLs

    | Environment | Base URL | Purpose |
    |-------------|----------|---------|
    | Customer test | `https://test-api.ultradns.com` | Configuration and change testing |
    | Production | `https://api.ultradns.com` | Configuration and changes |

    All URI examples use the production URL. You may test calls against the customer test environment. The test environment has limitations; contact customer support for details.

    ## Request and response formats

    The API accepts and returns XML or JSON. JSON is preferred and is the default response format (even if the request is XML).

    | Header | Values | Purpose |
    |--------|--------|---------|
    | `Content-Type` | `application/json` or `application/xml` | Request body format |
    | `Accept` | `application/json` or `application/xml` | Desired response format |

    JSON Patch is supported for updates. Use `PATCH` with `Content-Type: application/json-patch+json`.

    ## API versioning

    To target a particular API version, include it it in the request path (i.e. `/v1/`, `/v2/` or `/v3`). When omitted, the most recent production version is used.

    Some calls differ by version:

    | API area | Behavior |
    |----------|----------|
    | Directional update | Updating a Directional Pool record-level TTL is not supported with `/v1/`. |
    | Deprecated ISO codes | Directional API calls using `/v1/` return different Geo-ISO details than `/v2` (default). |
    | Batch API | Batch API calls work **only** with `/v1/`. |
    | Batch Query API | Batch Query API calls work **only** with `/v1/`. |
    | Reporting APIs | Reporting APIs no longer require a separate "Authentication" token; use the standard REST API authorization token. |
    | Reporting APIs (link headers) | Response Link Headers for additional report results work **only** with `/v1/`. |

    ## Data Transfer Objects (DTOs)

    A Data Transfer Object (DTO) is the structured data sent or returned by an API call. Fields may be simple types, comma-separated lists (where allowed), or nested DTOs.

    Example (Primary Zone creation): the Zone Create DTO includes:
    - `properties` — Zone API properties.
    - `primaryCreateInfo` — Primary Zone settings.

    Nested DTOs can include structures such as Restrict IP or Notify Address.

    ## Responses

    All operations return an HTTP status code.

    | HTTP | Meaning | Typical use | Notes |
    |------|---------|-------------|-------|
    | 200 | OK | `GET`, `PUT`, `PATCH` | Returns the requested or updated DTO when applicable. |
    | 201 | Created | `POST` | Resource created. |
    | 202 | Accepted | Async operations | Includes `X-Task-ID` header; work is pending. |
    | 204 | No Content | `DELETE` | Deletion succeeded; no body. |

    Errors return `4xx` or `5xx` with an UltraDNS error payload:

    ```json
    [
      {
        "errorCode": 1801,
        "errorMessage": "Zone does not exist in the system."
      }
    ]
    ```

    System-level database errors may return code `9999` with a system error message.

    ## 429 Too Many Requests

    Returned when too many requests come from the same customer or IP address in a short period, to protect service reliability and security.

    Tips to avoid 429 responses:

    * Reuse your authorization token instead of creating a new token for every call (tokens are reusable for up to 1 hour).
    * Add a short delay (0.5–1.0 seconds) between consecutive requests when necessary.

    ## Supported record types

    | Record Type                                 | ID  |
    | ------------------------------------------- | --- |
    | A — IPv4 Address                            | 1   |
    | NS — Name Server                            | 2   |
    | CNAME — Canonical Name                      | 5   |
    | SOA — Start of Authority                    | 6   |
    | PTR — Pointer                               | 12  |
    | MX — Mail Exchange                          | 15  |
    | TXT — Text                                  | 16  |
    | RP — Responsible Person                     | 17  |
    | AAAA — IPv6 Address                         | 28  |
    | LOC — Location                              | 29  |
    | SRV — Service Locator                       | 33  |
    | NAPTR — Naming Authority Pointer            | 35  |
    | SSHFP — SSH Fingerprint                     | 44  |
    | SPF — Sender Policy Framework               | 99  |
    | CAA — Certification Authority Authorization | 257 |
  version: 0.1.2
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  contact:
    name: UltraDNS
    url: https://dns.ultraproducts.support
    email: ultradnssupport@digicert.com
  termsOfService: https://www.digicert.com/security-terms
servers:
  - url: https://api.ultradns.com
    description: Primary UltraDNS API
  - url: https://test-api.ultradns.com
    description: Test UltraDNS API
security:
  - oauth2: []
tags:
  - name: Authorization
    description: |
      Obtain and refresh auth tokens via the OAuth 2.0 Resource Owner Password Credentials (ROPC) grant. Requires an UltraDNS API username and password.
  - name: Tasks
    description: |
      Track asynchronous operations (e.g., exports, snapshots). 202 responses include an `X-Task-ID` header; use it to check status and retrieve results.
  - name: Platform
    description: |
      Health, version, and connectivity checks for monitoring and compatibility.
  - name: Zones
    description: |
      Manage DNS zones: create, read, update, delete; export zone files; capture snapshots.
  - name: Records
    description: |
      Manage resource record sets (RRSets) within a zone (list, read, upsert via `rdata` and TTL, delete). `rdata` uses the BIND presentation format.
paths:
  /authorization/token:
    post:
      tags:
        - Authorization
      summary: Manage Auth Token
      description: |
        Issue or refresh an UltraDNS API access token.

        **Notes**
        - Repeated failed logins may trigger temporary lockout.
        - Only one refresh token is valid at a time; obtaining new credentials invalidates the previous refresh token.
        - Users with “API Only Access” can authenticate to the API but cannot sign in to the Portal.
      operationId: manageAuthToken
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
              properties:
                grant_type:
                  type: string
                  enum:
                    - password
                    - refresh_token
                  description: The OAuth2 grant type to use for authentication
                username:
                  type: string
                  description: The username for your account. Required when grant_type is 'password'.
                password:
                  type: string
                  description: The password for your account. Required when grant_type is 'password'.
                refresh_token:
                  type: string
                  description: The Refresh Value token taken from the Authorization API call. Required when grant_type is 'refresh_token'.
                expire_in:
                  type: integer
                  description: Set the duration, in seconds, in which the Refresh Token will expire. Only applies to refresh_token grant type. Optional field - if not provided, defaults to 604800 (7 days). Allowed Value = 1 - 604800
            examples:
              Password Grant:
                summary: Authenticate with username and password
                value:
                  grant_type: password
                  username: doc-example
                  password: mypass123
                  expire_in: 86400
              Refresh Token Grant:
                summary: Refresh access token using refresh token
                value:
                  grant_type: refresh_token
                  refresh_token: 2b217543b15fdedffe95387ff0a383d47ab37615d7
                  expire_in: 86400
      responses:
        '200':
          description: Refresh Token / Generate Auth Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
              examples:
                Generate Auth Token:
                  value:
                    accessToken: eolraOeTINu6WHeS.zUc4sS1vUKjzmKe9QyJecMeG1XN1TqwI3eXGC0sRbco.3VjD74_dMLWk2ec3vUXPUcIb4zH3K4fS
                    access_token: eolraOeTINu6WHeS.zUc4sS1vUKjzmKe9QyJecMeG1XN1TqwI3eXGC0sRbco.3VjD74_dMLWk2ec3vUXPUcIb4zH3K4fS
                    expiresIn: '3600'
                    expires_in: '3600'
                    refreshToken: 2b217543b15fdedffe95387ff0a383d47ab37615d7
                    refresh_token: 2b217543b15fdedffe95387ff0a383d47ab37615d7
                    tokenType: Bearer
                    token_type: Bearer
                    username: doc-example
                Refresh Token:
                  value:
                    accessToken: q3hpnHtaHHfLzTq_.HFBMZ45a99dt5H_jOh0tLqrmDVhyCvE7EHlOe7DZ2F8.YvogkldtGkb9fNJ_vihT2ORGQpM_kRU7
                    access_token: q3hpnHtaHHfLzTq_.HFBMZ45a99dt5H_jOh0tLqrmDVhyCvE7EHlOe7DZ2F8.YvogkldtGkb9fNJ_vihT2ORGQpM_kRU7
                    expiresIn: '3600'
                    expires_in: '3600'
                    refreshToken: 729dd9ba9ddaeab58fcdb9615f50f5dadd715f4d72
                    refreshTokenExpiresIn: '86400'
                    refresh_token: 729dd9ba9ddaeab58fcdb9615f50f5dadd715f4d72
                    refresh_token_expires_in: '86400'
                    tokenType: Bearer
                    token_type: Bearer
                    username: doc-example
        '401':
          $ref: '#/components/responses/Error401'
        5XX:
          $ref: '#/components/responses/Error5xx'
      security:
        - {}
  /version:
    get:
      tags:
        - Platform
      summary: Get Version
      description: |-
        The version call provides the version of the REST API currently in production.

        This call does not require an Authorization header to be specified, which allows it to be used to verify that there are no networking issues between a client and the REST API server.
      operationId: getVersion
      responses:
        '200':
          description: Get Version
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    example: 3.108.0-20250804151109.a1bbd8c
              examples:
                Get Version:
                  value:
                    version: 3.108.0-20250804151109.a1bbd8c
        5XX:
          $ref: '#/components/responses/Error5xx'
      security:
        - {}
  /status:
    get:
      tags:
        - Platform
      summary: Get Status
      description: The status call provides a simple way to determine if the REST API is running, and to make sure you are connecting to the UltraDNS Portal with proper authorization.
      operationId: getStatus
      responses:
        '200':
          description: Get Status
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Good
              examples:
                Get Status:
                  value:
                    message: Good
        '401':
          $ref: '#/components/responses/Error401'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones:
    post:
      tags:
        - Zones
      summary: Create a Zone
      description: |
        The Create Zone API allows you to create a Primary, Secondary, or Alias Zone, and furthermore, allows you to create a Zone "from scratch" by copying another zone via an uploaded file or by Zone transfer.

        The JSON examples provided below give a sample of each type of zone create call.
      operationId: createZone
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneCreate'
            examples:
              New Primary Zone:
                summary: Create a Primary Zone from scratch
                value:
                  properties:
                    name: primary-example.com.
                    accountName: example
                    type: PRIMARY
                  primaryCreateInfo:
                    forceImport: true
                    createType: NEW
                  changeComment: Created as agreed
              New Primary Zone Copied from Another Zone:
                summary: Create a Primary Zone by copying an existing zone
                value:
                  properties:
                    name: copy-example.com.
                    accountName: example
                    type: PRIMARY
                  primaryCreateInfo:
                    forceImport: true
                    createType: COPY
                    originalZoneName: example.cm.
              New Primary Uploaded from a File:
                summary: Create a Primary Zone by uploading a file
                value:
                  properties:
                    name: example.com.
                    accountName: example
                    type: PRIMARY
                  primaryCreateInfo:
                    forceImport: true
                    createType: UPLOAD
      responses:
        '201':
          $ref: '#/components/responses/CreatedGeneric'
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        5XX:
          $ref: '#/components/responses/Error5xx'
    get:
      tags:
        - Zones
      summary: List Zones
      description: Retrieves all zones in your account. The response returns an array of zone objects, each including details such as zone name, status, default TTL, and name servers.
      operationId: listZones
      parameters:
        - $ref: '#/components/parameters/QueryParams'
          description: |
            The query used to construct the list. Format: `query_param:value+query_param_2:value`

            Example: `zone_status:ALL+network:ultra2`

            Query operators are:

            - **name** - Name of the zone (allowing for partial string matches).
            - **zone_type** - Returns zones of an identified type. If not specified, all zone types are returned. Valid values are:
              - ALIAS
              - PRIMARY
              - SECONDARY
            - **zone_status** - Returns zones with the identified status. Active zones are returned if not specified. Valid values are:
              - ACTIVE
              - SUSPENDED
              - ALL
            - **account_name** - Returns zones based upon the account. If not specified, zones of all of the accounts that the user has access to will be returned.
            - **network** - Only applicable for those accounts with the UltraDNS2 feature enabled. Returns zones that are either on the UltraDNS (standard) network or are part of the UltraDNS2 service network. Valid values are:
              - ultra1 (standard UltraDNS)
              - ultra2
        - $ref: '#/components/parameters/Cursor'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Reverse'
      responses:
        '200':
          description: List Zones
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZonesList'
              examples:
                List Zones:
                  value:
                    queryInfo:
                      q: zone_status:ALL network:ultra2
                      sort: name
                      reverse: false
                      limit: 50
                    cursorInfo:
                      next: c3ViLnVsdHJhZG5zMnRlc3QuY29tLjpORVhU
                      last: fjpMQVNU
                    zones:
                      - properties:
                          name: testzone1.com.
                          accountName: testaccount1
                          type: PRIMARY
                          dnssecStatus: SIGNED
                          status: ACTIVE
                          owner: testuser1
                          resourceRecordCount: 4826
                          lastModifiedDateTime: '2025-08-22T13:12:00Z'
                          ultra2: true
                      - properties:
                          name: testzone2.com.
                          accountName: testaccount2
                          type: PRIMARY
                          dnssecStatus: UNSIGNED
                          status: ACTIVE
                          owner: testuser2
                          resourceRecordCount: 9
                          lastModifiedDateTime: '2025-08-21T13:26:00Z'
                          ultra2: true
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/export:
    post:
      tags:
        - Zones
      summary: Export a Zone
      description: |
        Exporting a Zone will create a task to export the zone details into a BIND file. Once the task has been completed the BIND file can be downloaded.
      operationId: exportZone
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                zoneNames:
                  type: array
                  items:
                    type: string
                  description: The name or names of the zones that are being exported, with or without the trailing dot.
                  example:
                    - name.com
                    - name2.com.
              required:
                - zoneNames
            examples:
              Export Single Zone:
                summary: Export a single zone
                value:
                  zoneNames:
                    - example.com
              Export Multiple Zones:
                summary: Export multiple zones
                value:
                  zoneNames:
                    - name.com
                    - name2.com.
      responses:
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/{zoneName}:
    put:
      tags:
        - Zones
      summary: Update a Zone
      description: |
        The Update Zone call allows you to update certain aspects of either a Primary or a Secondary Zone. You cannot use this call to:

        - Update an Alias Zone.
        - Specify Primary Name Servers for a Primary zone.
        - Specify restrict IPs, TSIG, or Notify addresses for a Secondary Zone.

        As this is a FULL update (replacing data) for Primary Zone updates, you must include any necessary restrict IPs, Notify addresses, or Primary Name Servers that apply. Any data not included with the update will be deleted from the Primary Zone.
      operationId: updateZone
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneCreate'
            examples:
              Update Restrict IP for Primary Zone:
                summary: Update Restrict IP information for Primary Zone
                value:
                  properties:
                    name: example.com.
                    accountName: example
                    type: PRIMARY
                  primaryCreateInfo:
                    restrictIPList:
                      - startIP: 10.20.30.40
                        endIP: 20.20.20.20
                        comment: Comment
                  changeComment: Updating zone
              Update TSIG and Notify for Primary Zone:
                summary: Update TSIG and Notify information for Primary Zone
                value:
                  properties:
                    name: example.com.
                    accountName: example
                    type: PRIMARY
                  primaryCreateInfo:
                    tsig:
                      tsigKeyName: Key
                      tsigKeyValue: This would be a hash if it was real
                      description: TSIG for primary-example.com
                      tsigAlgorithm: hmac-sha256
                    notifyAddresses:
                      - notifyAddress: 2.4.5.6
                        description: East Coast Server
                      - notifyAddress: 5.6.7.8
                        description: West Coast Server
                  changeComment: Updating TSIG and notify addresses
              Update Primary Name Servers for Secondary Zone:
                summary: Update Primary Name Server information for Secondary Zone
                value:
                  properties:
                    name: example.com.
                    accountName: example
                    type: SECONDARY
                  secondaryCreateInfo:
                    primaryNameServers:
                      nameServerIpList:
                        nameServerIP1:
                          ip: 1.2.3.4
                          tsigKey: key1
                          tsigKeyValue: value1
                        nameServerIP2:
                          ip: 2.4.5.6
                          tsigKey: key2
                          tsigKeyValue: value2
                        nameServerIP3:
                          ip: 3.4.5.6
                          tsigKey: key3
                          tsigKeyValue: value3
                  changeComment: Updating primary name servers
      responses:
        '200':
          description: Zone updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
    patch:
      tags:
        - Zones
      summary: Partially Update a Zone
      description: |
        The Partial Update a Zone call is used to:

        - Update the restrictIPs, TSIG key, and/or Notify Address information for a Primary zone without having to explicitly list all of them. Any Restrict IPs, TSIGs or Notify Addresses not included in the call are retained on the server.
        - Update the Primary Name Servers for a Secondary zone without having to explicitly list all of them. Any Primary Name Servers not included in the call are retained on the server.

        Alias zones cannot be updated.
      operationId: partiallyUpdateZone
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneCreate'
            examples:
              Partial Update Restrict IP for Primary Zone:
                summary: Partially update restrict IP information for Primary Zone
                value:
                  properties:
                    name: example.com.
                    accountName: example
                    type: PRIMARY
                  primaryCreateInfo:
                    restrictIPList:
                      - startIP: 10.20.30.40
                        endIP: 20.20.20.20
                        comment: New restrict IP range
                  changeComment: Adding new restrict IP range
              Partial Update TSIG for Primary Zone:
                summary: Partially update TSIG information for Primary Zone
                value:
                  properties:
                    name: example.com.
                    accountName: example
                    type: PRIMARY
                  primaryCreateInfo:
                    tsig:
                      tsigKeyName: NewKey
                      tsigKeyValue: This would be a hash if it was real
                      description: New TSIG key for example.com
                      tsigAlgorithm: hmac-sha256
                  changeComment: Updating TSIG key
              Partial Update Primary Name Servers for Secondary Zone:
                summary: Partially update primary name servers for Secondary Zone
                value:
                  properties:
                    name: example.com.
                    accountName: example
                    type: SECONDARY
                  secondaryCreateInfo:
                    primaryNameServers:
                      nameServerIpList:
                        nameServerIP1:
                          ip: 1.2.3.4
                          tsigKey: key1
                          tsigKeyValue: value1
                  changeComment: Adding new primary name server
          application/json-patch+json:
            schema:
              type: array
              description: JSON Patch operations for partial zone updates
              items:
                type: object
                properties:
                  op:
                    type: string
                    enum:
                      - add
                      - remove
                      - replace
                      - copy
                      - move
                      - test
                    description: The operation to be performed
                  path:
                    type: string
                    description: A JSON Pointer string specifying a location within the target document
                  value:
                    description: The value to be used within the operations
                required:
                  - op
                  - path
            examples:
              JSON Patch Example:
                summary: JSON Patch operations for zone updates
                value:
                  - op: replace
                    path: /primaryCreateInfo/tsig/tsigKeyName
                    value: NewTSIGKey
                  - op: add
                    path: /primaryCreateInfo/restrictIPList/-
                    value:
                      startIP: 192.168.1.100
                      endIP: 192.168.1.200
                      comment: New IP range
      responses:
        '200':
          description: Zone partially updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
    get:
      tags:
        - Zones
      summary: List Zone Properties
      description: Retrieves metadata for a specific zone, including record count, name servers, status, type, and other zone-level properties.
      operationId: listZoneProperties
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      responses:
        '200':
          description: List Zone Properties
          content:
            application/json:
              schema:
                type: object
                properties:
                  inherit:
                    type: string
                    example: ALL
                  properties:
                    $ref: '#/components/schemas/ZoneProperties'
                  registrarInfo:
                    $ref: '#/components/schemas/RegistrarInfo'
              examples:
                List Zone Properties:
                  value:
                    inherit: ALL
                    properties:
                      accountName: postman-example
                      dnssecStatus: UNSIGNED
                      lastModifiedDateTime: '2025-06-17T23:48:00Z'
                      name: domain.com.
                      owner: postman-example
                      resourceRecordCount: 7
                      status: ACTIVE
                      type: PRIMARY
                    registrarInfo:
                      nameServers:
                        missing:
                          - pdns1.ultradns.net.
                          - pdns2.ultradns.net.
                          - pdns3.ultradns.org.
                          - pdns4.ultradns.org.
                          - pdns5.ultradns.info.
                          - pdns6.ultradns.co.uk.
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
    delete:
      tags:
        - Zones
      summary: Delete a Zone
      description: |
        The Delete Zone API allows you to delete any zone you have the proper authority to delete. You cannot delete a primary zone if it has an Alias zone.

        If delete happens immediately, Status Code 204 is returned with no body content.
        If delete happens in the background, a Status Code 202 is returned with a status response message of Pending, along with an X-Task-Id header in body content.
      operationId: deleteZone
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneDelete'
            examples:
              Delete Zone with Change Comment:
                summary: Delete zone with a change comment
                value:
                  changeComment: Deleting Zone as agreed
      responses:
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '204':
          description: Zone deleted successfully
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/{zoneName}/transfer:
    post:
      tags:
        - Zones
      summary: Request Zone Transfer
      description: |
        The Request Zone Transfer call sends an AXFR request through a Secondary Zone, to the primary name server in order to update the Secondary Zone with information from the Primary Zone.

        The {zoneName} identified in the call should be the name of the Secondary Zone to be updated.
      operationId: requestZoneTransfer
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      requestBody:
        required: false
      responses:
        '200':
          description: Zone transfer completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Zone transfer completed successfully
              examples:
                Transfer Completed:
                  value:
                    message: Zone transfer completed successfully
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/{zoneName}/rrsets:
    get:
      tags:
        - Records
      summary: List RRsets
      description: |-
        Retrieves all resource record sets (RRSets) in the specified DNS zone. Requires the `records_zoneName` environment variable.

        Supports optional query parameters to filter results (for example, by record type, ownerName, TTL) or paginate the list.
      operationId: listRrsets
      parameters:
        - $ref: '#/components/parameters/ZoneName'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Reverse'
      responses:
        '200':
          description: List RRsets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RRSetsList'
              examples:
                List RRsets:
                  value:
                    queryInfo:
                      limit: 100
                      reverse: false
                      sort: OWNER
                    resultInfo:
                      offset: 0
                      returnedCount: 3
                      totalCount: 3
                    rrSets:
                      - ownerName: domain.com.
                        rdata:
                          - pdns1.ultradns.net.
                          - pdns2.ultradns.net.
                          - pdns3.ultradns.org.
                          - pdns4.ultradns.org.
                          - pdns5.ultradns.info.
                          - pdns6.ultradns.co.uk.
                        rrtype: NS (2)
                        ttl: 86400
                      - ownerName: domain.com.
                        rdata:
                          - pdns1.ultradns.net. shane\.barbetta.digicert.com. 2025061702 86400 86400 86400 86400
                        rrtype: SOA (6)
                        ttl: 86400
                      - ownerName: www.domain.com.
                        rdata:
                          - 204.74.99.100
                        rrtype: A (1)
                        ttl: 300
                    zoneName: domain.com
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/{zoneName}/rrsets/{records_type}:
    get:
      tags:
        - Records
      summary: List Records by Type
      description: Retrieves all resource record sets (RRSets) of a specific type within the specified DNS zone. Requires the `records_zoneName` and `records_type` environment variables. Set `records_type` to the desired record type (e.g., A, CNAME, TXT) to filter the results. The response returns an array of matching RRSet objects.
      operationId: listRecordsByType
      parameters:
        - $ref: '#/components/parameters/ZoneName'
        - $ref: '#/components/parameters/RecordsType'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Reverse'
      responses:
        '200':
          description: List Records by Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RRSetsList'
              examples:
                List Records by Type:
                  value:
                    queryInfo:
                      limit: 100
                      reverse: false
                      sort: OWNER
                    resultInfo:
                      offset: 0
                      returnedCount: 1
                      totalCount: 1
                    rrSets:
                      - ownerName: www.domain.com.
                        rdata:
                          - 204.74.99.100
                        rrtype: A (1)
                        ttl: 300
                    zoneName: domain.com
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /tasks:
    get:
      tags:
        - Tasks
      summary: Get the List of Tasks
      description: Retrieves a list of all tasks for the current user with optional filtering and pagination.
      operationId: getTasks
      parameters:
        - $ref: '#/components/parameters/QueryParams'
          description: |
            The query used to construct the list. Query operators are code and hasData.

            Valid values for code are:
            - PENDING
            - IN_PROCESS
            - COMPLETE
            - ERROR

            Valid values for hasData are TRUE or FALSE. Default value of hasData is NULL. Query operators need be followed by a colon ( : ).

            Example:
            - q="code:COMPLETE"
            - q="hasData:TRUE"
            - q="code:COMPLETE hasData:TRUE"
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/TaskSort'
        - $ref: '#/components/parameters/Reverse'
        - $ref: '#/components/parameters/TaskType'
      responses:
        '200':
          description: List of tasks retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TaskList'
                  - $ref: '#/components/schemas/ReportTaskList'
              examples:
                Task List:
                  summary: Regular task list (default)
                  value:
                    tasks:
                      - taskId: 0b40c7dd-748d-4c49-8506-26f0c7d2ea9c
                        code: COMPLETE
                        message: Processing complete
                        resultUri: /tasks/0b40c7dd-748d-4c49-8506-26f0c7d2ea9c/result
                    queryInfo:
                      q: code:COMPLETE
                      sort: CODE
                      reverse: false
                      limit: 100
                    resultInfo:
                      totalCount: 1
                      offset: 0
                      returnedCount: 1
                Report Task List:
                  summary: Report task list (when taskType=reporting)
                  value:
                    tasks:
                      - taskId: ZQV-013d3c5c-7b14-4ff0-b4af-453b76a827b6
                        code: COMPLETE
                        message: Completed ZQV Report Successfully.
                        lastModifiedDateTime: '2016-08-26T12:33:22.000Z'
                        resultUri: https://api.ultradns.com/reports/tasks/ZQV-013d3c5c-7b14-4ff0-b4af-453b76a827b6
                      - taskId: PQV-003f098b-a2df-437e-8482-65e8d93b4858
                        code: COMPLETE
                        message: Completed PQVReport Successfully.
                        lastModifiedDateTime: '2016-08-26T12:33:22.000Z'
                        resultUri: https://api.ultradns.com/reports/tasks/PQV-003f098b-a2df-437e-8482-65e8d93b4858
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /tasks/{taskId}:
    get:
      tags:
        - Tasks
      summary: Get the Status of a Task
      description: Retrieves the current status of a background task. Returns a Task DTO with the current state of the task.
      operationId: checkTask
      parameters:
        - $ref: '#/components/parameters/TaskId'
      responses:
        '200':
          description: Task status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
              examples:
                Check Task:
                  value:
                    taskId: 605b23e4-edb9-4f23-ae2d-33fe24d6033f
                    code: COMPLETE
                    message: domain.com. export completed.
                    resultUri: /tasks/605b23e4-edb9-4f23-ae2d-33fe24d6033f/result
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
    delete:
      tags:
        - Tasks
      summary: Delete a Task
      description: This call will remove information from the system for a task that has completed or is in an error-state.
      operationId: deleteTask
      parameters:
        - $ref: '#/components/parameters/TaskId'
      responses:
        '204':
          description: Task deleted successfully
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /tasks/{taskId}/result:
    get:
      tags:
        - Tasks
      summary: Get the Results of a Task
      description: Retrieves the final result of a completed background task. The content will be returned as a downloadable file. The name of the file will be the {taskId} that was submitted with the request. The file extension and content type are set by the background task and will be appropriate to the data returned.
      operationId: taskResult
      parameters:
        - $ref: '#/components/parameters/TaskId'
      responses:
        '200':
          description: Task result file downloaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
                    description: The task result content as a string
                required:
                  - content
              description: The task result as a downloadable file. The filename will be the taskId and the content type will be determined by the background task.
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        password:
          tokenUrl: https://api.ultradns.com/authorization/token
          scopes: {}
  schemas:
    QueryInfo:
      type: object
      properties:
        q:
          type: string
          description: The query used to construct the list
          example: zone_status:ALL+network:ultra2
        limit:
          type: integer
          minimum: 1
          maximum: 1000
          default: 100
          description: The maximum number of rows requested. Default is 100, maximum is 1,000
          example: 50
        reverse:
          type: boolean
          description: Whether the list is ascending (false) or descending (true)
          example: false
        sort:
          type: string
          description: The sort column used to order the list
          example: name
      required:
        - limit
        - reverse
        - sort
    CursorInfo:
      type: object
      description: Cursor information for pagination with next, previous, first and last values
      properties:
        next:
          type: string
          description: Cursor for the next page of results
          example: c3ViLnVsdHJhZG5zMnRlc3QuY29tLjpORVhU
        previous:
          type: string
          description: Cursor for the previous page of results
        first:
          type: string
          description: Cursor for the first page of results
        last:
          type: string
          description: Cursor for the last page of results
          example: fjpMQVNU
    ResultInfo:
      type: object
      properties:
        totalCount:
          type: integer
          minimum: 0
          description: Total number of items available
        offset:
          type: integer
          minimum: 0
          description: Zero-based offset for pagination
        returnedCount:
          type: integer
          minimum: 0
          description: Number of items returned in this response
      required:
        - totalCount
        - offset
        - returnedCount
    Zone:
      type: object
      description: The Zone DTO is the data structure returned for the Zone DTOs call
      properties:
        properties:
          $ref: '#/components/schemas/ZoneProperties'
        restrictIpList:
          type: array
          description: The list of IP ranges that are allowed to use AXFR to transfer primary zones out. Only present if this is a primary zone.
          items:
            $ref: '#/components/schemas/RestrictIP'
          example:
            - cidr: 192.168.1.0/24
              comment: Office network range
            - singleIP: 10.0.0.100
              comment: Backup server
        primaryNameServers:
          $ref: '#/components/schemas/NameServerIPList'
          description: The primary name servers that are the source of a secondary zone. Only present if this is a secondary zone.
        originalZoneName:
          type: string
          description: The name of the zone that is the source of an alias zone. Only present if this is an alias zone.
          example: originalzone.com.
        registrarInfo:
          $ref: '#/components/schemas/RegistrarInfo'
          description: Information about the name server configuration for this zone. Only present if this is a primary zone.
        tsig:
          $ref: '#/components/schemas/TSIG'
          description: The TSIG information for the primary zone. Only present if this is a primary zone.
        notifyAddresses:
          type: array
          description: The addresses that are notified when updates are made to the primary zone. Only present if this is a primary zone.
          items:
            $ref: '#/components/schemas/NotifyAddress'
          example:
            - notifyAddress: 192.168.1.100
              description: Primary DNS server
            - notifyAddress: 192.168.1.101
              description: Backup DNS server
        transferStatusDetails:
          $ref: '#/components/schemas/TransferStatusDetails'
          description: The zone transfer status details
    ZoneCreate:
      type: object
      description: The Zone Create DTO is the data structure required for creating a zone in UltraDNS
      properties:
        properties:
          $ref: '#/components/schemas/ZoneProperties'
          description: The Zone Properties DTO is required for all zone types.
        primaryCreateInfo:
          $ref: '#/components/schemas/PrimaryZone'
          description: Primary Zone settings. Required when creating a PRIMARY zone.
        secondaryCreateInfo:
          $ref: '#/components/schemas/SecondaryZone'
          description: Secondary Zone settings. Required when creating a SECONDARY zone.
        aliasCreateInfo:
          $ref: '#/components/schemas/AliasZone'
          description: Alias Zone settings. Required when creating an ALIAS zone.
        changeComment:
          type: string
          description: A comment describing the zone creation operation.
          example: Create an alias zone
      required:
        - properties
    PrimaryZone:
      type: object
      description: The Primary Zone DTO contains the metadata used to create or update a Primary Zone
      properties:
        forceImport:
          type: boolean
          description: Whether or not to move existing records from zones into this new zone. true = move, false = leave in existing zone (default). Only used for primary zone creation. If not present, defaults to "false". Ignored if present for update.
          example: false
        createType:
          type: string
          description: Indicates the method for creating the primary zone.
          enum:
            - NEW
            - COPY
            - TRANSFER
            - UPLOAD
          example: NEW
        nameServer:
          type: object
          description: Name server configuration for zone transfer. Required if createType is "TRANSFER".
          properties:
            ip:
              type: string
              description: IP address of the primary zone's name server (where the primary zone is being transferred from). Required if createType is "TRANSFER".
              format: ipv4
              example: 192.168.1.10
            tsigKey:
              type: string
              description: If TSIG is enabled for this name server, the name of the TSIG key. Used only if createType is "TRANSFER". Required if TSIG is enabled for this name server.
              example: transfer-tsig-key
            tsigKeyValue:
              type: string
              description: If TSIG is enabled for this name server, the TSIG key's value. Used only if createType is "TRANSFER". Required if TSIG is enabled for this name server.
              example: base64-encoded-tsig-secret
            tsigAlgorithm:
              type: string
              description: The hash algorithm used to generate the TSIG key. Used only if createType is "TRANSFER". Default is hmac-md5. Required if TSIG is enabled for this name server.
              enum:
                - hmac-md5
                - hmac-sha1
                - hmac-sha224
                - hmac-sha256
                - hmac-sha384
                - hmac-sha512
              default: hmac-md5
              example: hmac-sha256
        originalZoneName:
          type: string
          description: The name of the zone being copied. The existing zone must be owned by the same account as the new zone. Required if createType is "COPY".
          example: originalzone.com.
        restrictIpList:
          type: array
          description: The list of IP ranges that are allowed to transfer primary zones out using zone transfer protocol (AXFR/IXFR).
          items:
            $ref: '#/components/schemas/RestrictIP'
          example:
            - cidr: 192.168.1.0/24
              comment: Office network range
            - singleIP: 10.0.0.100
              comment: Backup server
        tsig:
          $ref: '#/components/schemas/TSIG'
          description: The TSIG information for the primary zone.
        notifyAddresses:
          type: array
          description: The addresses that are notified when updates are made to the primary zone.
          items:
            $ref: '#/components/schemas/NotifyAddress'
          example:
            - notifyAddress: 192.168.1.100
              description: Primary DNS server
            - notifyAddress: 192.168.1.101
              description: Backup DNS server
        inherit:
          type: string
          description: Defines whether this zone should inherit the zone transfer values from the Account, and also specifies which values to inherit. Defaults to "ALL" if zone transfer settings on the account have been set.
          example: ALL
    SecondaryZone:
      type: object
      description: The Secondary Zone Create DTO holds the metadata used to create or update a Secondary Zone
      properties:
        primaryNameServers:
          $ref: '#/components/schemas/NameServerIPList'
          description: The primary name servers of the source zone for the secondary zone. Required for creating or updating a secondary zone. Ignored in all other cases.
        notificationEmailAddress:
          type: string
          description: The Notification Email for a secondary zone.
          example: admin@example.com
        allowUnresponsiveNS:
          type: boolean
          description: When enabled, allows for an IP Address that may be offline or unresponsive to be configured. true = enabled
          example: false
    AliasZone:
      type: object
      description: The Alias Zone DTO holds the metadata used for creating an Alias Zone
      properties:
        originalZoneName:
          type: string
          description: The name of the zone being aliased. The existing zone must be owned by the same account as the new zone. Required for alias during creation.
          example: originalzone.com.
    ZonesList:
      type: object
      properties:
        queryInfo:
          $ref: '#/components/schemas/QueryInfo'
        cursorInfo:
          $ref: '#/components/schemas/CursorInfo'
        zones:
          type: array
          items:
            $ref: '#/components/schemas/Zone'
          description: List of the returned zones. Each item in the list matches the zone DTO described above.
      required:
        - zones
    RRSet:
      type: object
      properties:
        ownerName:
          type: string
          description: The owner name (record label) of the RRSet
          example: domain.com.
        rdata:
          type: array
          items:
            type: string
          description: Array of record data values in BIND presentation format
          example:
            - pdns1.ultradns.net.
            - pdns2.ultradns.net.
        rrtype:
          type: string
          description: DNS record type with numeric value
          example: NS (2)
        ttl:
          type: integer
          description: Time to live in seconds
          example: 86400
    RRSetsList:
      type: object
      properties:
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
        rrSets:
          type: array
          items:
            $ref: '#/components/schemas/RRSet'
        zoneName:
          type: string
          description: The zone name
          example: domain.com
      required:
        - rrSets
    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: OAuth 2.0 access token (camelCase variant)
        access_token:
          type: string
          description: OAuth 2.0 access token (snake_case variant)
        expiresIn:
          type: string
          description: Token expiration time in seconds (camelCase variant)
        expires_in:
          type: string
          description: Token expiration time in seconds (snake_case variant)
        refreshToken:
          type: string
          description: OAuth 2.0 refresh token (camelCase variant)
        refresh_token:
          type: string
          description: OAuth 2.0 refresh token (snake_case variant)
        refreshTokenExpiresIn:
          type: string
          description: Refresh token expiration time in seconds (camelCase variant)
        refresh_token_expires_in:
          type: string
          description: Refresh token expiration time in seconds (snake_case variant)
        tokenType:
          type: string
          example: Bearer
          description: Token type (camelCase variant)
        token_type:
          type: string
          example: Bearer
          description: Token type (snake_case variant)
        username:
          type: string
          description: Username associated with the token
    ErrorGeneric:
      type: object
      required:
        - errorCode
        - errorMessage
      properties:
        errorCode:
          type: integer
          description: Numeric error code
        errorMessage:
          type: string
          description: Human-readable error message
        error:
          type: string
          description: OAuth2 error type
        error_description:
          type: string
          description: Detailed error description with error code
    Task:
      type: object
      description: The Task DTO is used to describe the current state of a task.
      properties:
        taskId:
          type: string
          format: uuid
          description: Id for the task.
          example: 0b40c7dd-748d-4c49-8506-26f0c7d2ea9c
        code:
          type: string
          enum:
            - PENDING
            - IN_PROCESS
            - COMPLETE
            - ERROR
          description: Current state of the task.
          example: COMPLETE
        message:
          type: string
          description: Current message for the task.
          example: Processing complete
        resultUri:
          type: string
          format: uri-reference
          description: If task is COMPLETE, the URI from where the resulting data can be downloaded.
          example: /tasks/0b40c7dd-748d-4c49-8506-26f0c7d2ea9c/result
      required:
        - taskId
        - code
        - message
    TaskList:
      type: object
      description: The TaskList DTO is returned when requesting the state of all tasks for a user.
      properties:
        tasks:
          type: array
          description: The list of returned tasks. Each entry in the list matches the task DTO described above.
          items:
            $ref: '#/components/schemas/Task'
          example:
            - taskId: 0b40c7dd-748d-4c49-8506-26f0c7d2ea9c
              code: COMPLETE
              message: Processing complete
              resultUri: /tasks/0b40c7dd-748d-4c49-8506-26f0c7d2ea9c/result
        queryInfo:
          $ref: '#/components/schemas/QueryInfo'
          description: The query used to construct the list.
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
          description: Information about the result set.
      required:
        - tasks
        - queryInfo
        - resultInfo
    ReportTask:
      type: object
      description: The Reporter Task DTO is used to describe the current state of a task.
      properties:
        taskId:
          type: string
          description: Id for the task.
          example: ZQV-013d3c5c-7b14-4ff0-b4af-453b76a827b6
        code:
          type: string
          enum:
            - PENDING
            - IN_PROCESS
            - COMPLETE
            - ERROR
          description: Current state of the task.
          example: COMPLETE
        message:
          type: string
          description: Current message for the task.
          example: Completed ZQV Report Successfully.
        lastModifiedDateTime:
          type: string
          format: date-time
          description: Last Modified date time of the task.
          example: '2016-08-26T12:33:22.000Z'
        resultUri:
          type: string
          format: uri-reference
          description: If task is COMPLETE, the URI from where the resulting data can be downloaded.
          example: https://api.ultradns.com/reports/tasks/ZQV-013d3c5c-7b14-4ff0-b4af-453b76a827b6
      required:
        - taskId
        - code
        - message
        - lastModifiedDateTime
    ReportTaskList:
      type: object
      description: The Reporter TaskList DTO is returned when requesting the state of all tasks for a user.
      properties:
        tasks:
          type: array
          description: The list of returned tasks. Each entry in the list matches the task DTO described above.
          items:
            $ref: '#/components/schemas/ReportTask'
          example:
            - taskId: ZQV-013d3c5c-7b14-4ff0-b4af-453b76a827b6
              code: COMPLETE
              message: Completed ZQV Report Successfully.
              lastModifiedDateTime: '2016-08-26T12:33:22.000Z'
              resultUri: https://api.ultradns.com/reports/tasks/ZQV-013d3c5c-7b14-4ff0-b4af-453b76a827b6
            - taskId: PQV-003f098b-a2df-437e-8482-65e8d93b4858
              code: COMPLETE
              message: Completed PQVReport Successfully.
              lastModifiedDateTime: '2016-08-26T12:33:22.000Z'
              resultUri: https://api.ultradns.com/reports/tasks/PQV-003f098b-a2df-437e-8482-65e8d93b4858
      required:
        - tasks
    ZoneDelete:
      type: object
      description: Optional request body for zone deletion
      properties:
        changeComment:
          type: string
          description: Comment describing the reason for the zone deletion
          example: Deleting Zone as agreed
    ZoneProperties:
      type: object
      description: The Zone Properties DTO holds the common metadata across all types of zones
      properties:
        name:
          type: string
          description: Name of the zone, with trailing periods (....). Must be a valid domain name. Required for zone creation. Ignored if present on update.
          example: 0-0-0-0-0sample.com.
        accountName:
          type: string
          description: Name of the account. Required for zone creation. Ignored if present on update.
          example: testaccount
        type:
          type: string
          description: Type of zone. Valid values are PRIMARY, SECONDARY or ALIAS. Required for zone creation. Ignored if present on update.
          enum:
            - PRIMARY
            - SECONDARY
            - ALIAS
          example: PRIMARY
        dnssecStatus:
          type: string
          description: Whether or not the zone is signed with DNSSEC. Valid values are SIGNED or UNSIGNED. Returned in GET responses for zone information. Ignored if present on create or update.
          enum:
            - SIGNED
            - UNSIGNED
          example: UNSIGNED
        digicertEnabled:
          type: boolean
          description: Indicates whether the zone is visible to DigiCert CertCentral, allowing them to automatically manage Domain Validations. True = enabled, False = disabled (default). Not available for Alias, Secondary, or Suspended zones. This field will only be displayed if the digicert_enabled feature is enabled and active.
          example: true
        owner:
          type: string
          description: Name of the user that created the zone. Returned in GET responses for zone information. Ignored if present on create or update.
          example: team
        recordCount:
          type: integer
          description: Number of records in the zone. Returned in GET responses for zone information. Ignored if present on create or update.
          example: 15
        lastModifiedDateTime:
          type: string
          format: date-time
          description: The last date and time the zone was modified, represented in ISO8601 format. Returned in GET responses for zone information. Ignored if present on create or update.
          example: '2025-02-20T08:40:00Z'
        ultra2:
          type: boolean
          description: Only applicable to accounts that have enabled the UltraDNS2 service. Indicates if the zone has UltraDNS2 enabled or not. Valid values are false and true. Returned in GET responses for zone information.
          example: true
    RestrictIP:
      type: object
      description: Each Restrict IP DTO holds the IP addresses that are allowed to transfer Primary Zones out using the Zone Transfer protocol (AXFR/IXFR). Only one format should be specified in the DTO at a time (range, CIDR or single IP).
      properties:
        startIP:
          type: string
          description: The start of the IP range that is allowed to transfer this primary zone out using zone transfer protocol. IPv4 or IPv6 address.
          format: ipv4
          example: 192.168.1.1
        endIP:
          type: string
          description: The end of the IP range that is allowed to transfer this primary zone out using zone transfer protocol. IPv4 or IPv6 address.
          format: ipv4
          example: 192.168.1.254
        cidr:
          type: string
          description: The IP ranges specified in CIDR (e.g. 1.1.1.1/30, ::10/126)
          pattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$|^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}(\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))$
          example: 192.168.1.0/24
        singleIP:
          type: string
          description: The IP that is allowed to transfer this primary zone out using zone transfer protocol. IPv4 or IPv6 address.
          format: ipv4
          example: 192.168.1.100
        comment:
          type: string
          description: A description of this range of IP addresses. Optional.
          example: Office network range
      anyOf:
        - required:
            - startIP
            - endIP
        - required:
            - cidr
        - required:
            - singleIP
      not:
        allOf:
          - required:
              - startIP
              - endIP
          - required:
              - cidr
          - required:
              - singleIP
    NameServerIPList:
      type: object
      description: The Name Server IP List DTO lists the Primary Name Servers for a Secondary Zone
      properties:
        nameServerIpList:
          type: object
          description: List of name server IPs with their TSIG configurations
          properties:
            nameServerIP1:
              type: object
              description: The primary name server for the source zone
              properties:
                ip:
                  type: string
                  description: The IP address of the primary name server for the source zone. IPv4 or IPv6 address. Required for creation or update of a secondary zone.
                  format: ipv4
                  example: 192.168.1.10
                tsigKey:
                  type: string
                  description: If TSIG is enabled for this name server, the name of the TSIG key. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  example: tsig-key-1
                tsigKeyValue:
                  type: string
                  description: If TSIG is enabled for this name server, the TSIG key's value. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  example: base64-encoded-secret-1
                tsigAlgorithm:
                  type: string
                  description: The hash algorithm used to generate the TSIG key. Default is hmac-md5. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  enum:
                    - hmac-md5
                    - hmac-sha1
                    - hmac-sha224
                    - hmac-sha256
                    - hmac-sha384
                    - hmac-sha512
                  default: hmac-md5
                  example: hmac-sha256
              required:
                - ip
            nameServerIP2:
              type: object
              description: The first backup name server for the source zone
              properties:
                ip:
                  type: string
                  description: The IP address of the first backup name server for the source zone. IPv4 or IPv6 address. Optional for creation or update of a secondary zone.
                  format: ipv4
                  example: 192.168.1.11
                tsigKey:
                  type: string
                  description: If TSIG is enabled for this name server, the name of the TSIG key. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  example: tsig-key-2
                tsigKeyValue:
                  type: string
                  description: If TSIG is enabled for this name server, the TSIG key's value. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  example: base64-encoded-secret-2
                tsigAlgorithm:
                  type: string
                  description: The hash algorithm used to generate the TSIG key. Default is hmac-md5. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  enum:
                    - hmac-md5
                    - hmac-sha1
                    - hmac-sha224
                    - hmac-sha256
                    - hmac-sha384
                    - hmac-sha512
                  default: hmac-md5
                  example: hmac-sha256
            nameServerIP3:
              type: object
              description: The second backup name server for the source zone
              properties:
                ip:
                  type: string
                  description: The IP address of the second backup name server for the source zone. IPv4 or IPv6 address. Optional for creation or update of a secondary zone.
                  format: ipv4
                  example: 192.168.1.12
                tsigKey:
                  type: string
                  description: If TSIG is enabled for this name server, the name of the TSIG key. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  example: tsig-key-3
                tsigKeyValue:
                  type: string
                  description: If TSIG is enabled for this name server, the TSIG key's value. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  example: base64-encoded-secret-3
                tsigAlgorithm:
                  type: string
                  description: The hash algorithm used to generate the TSIG key. Default is hmac-md5. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  enum:
                    - hmac-md5
                    - hmac-sha1
                    - hmac-sha224
                    - hmac-sha256
                    - hmac-sha384
                    - hmac-sha512
                  default: hmac-md5
                  example: hmac-sha256
          required:
            - nameServerIP1
          example:
            nameServerIP1:
              ip: 192.168.1.10
              tsigKey: primary-tsig-key
              tsigKeyValue: base64-encoded-secret
              tsigAlgorithm: hmac-sha256
            nameServerIP2:
              ip: 192.168.1.11
              tsigKey: backup-tsig-key
              tsigKeyValue: base64-encoded-backup-secret
              tsigAlgorithm: hmac-sha256
    RegistrarInfo:
      type: object
      description: The Registrar Info DTO holds the domain name registry information for a Primary Zone
      properties:
        registrar:
          type: string
          description: The name of the domain registrar
          example: GoDaddy
        whoisExpiration:
          type: string
          format: date
          description: The date when the domain name registration expires
          example: '2025-12-31'
        nameServers:
          type: object
          description: Name server configuration status for this domain
          properties:
            ok:
              type: array
              items:
                type: string
              description: List of UltraDNS name servers that are configured for this domain
              example:
                - pdns1.ultradns.net.
                - pdns2.ultradns.net.
                - pdns3.ultradns.org.
            unknown:
              type: array
              items:
                type: string
              description: List of name servers that are configured for this domain, but are not UltraDNS-managed name servers
              example:
                - ns1.example.com.
                - ns2.example.com.
            missing:
              type: array
              items:
                type: string
              description: List of UltraDNS name servers that should be configured for this domain, but are not
              example:
                - pdns4.ultradns.org.
                - pdns5.ultradns.info.
                - pdns6.ultradns.co.uk.
            incorrect:
              type: array
              items:
                type: string
              description: List of any obsolete UltraDNS name servers that are still configured for this zone
              example:
                - obsolete1.ultradns.net.
                - obsolete2.ultradns.net.
          example:
            ok:
              - pdns1.ultradns.net.
              - pdns2.ultradns.net.
              - pdns3.ultradns.org.
            missing:
              - pdns4.ultradns.org.
              - pdns5.ultradns.info.
              - pdns6.ultradns.co.uk.
    TSIG:
      type: object
      description: The TSIG DTO holds TSIG information for the Primary Zone
      properties:
        tsigKeyName:
          type: string
          description: The name of the TSIG key for the zone. REQUIRED.
          example: zone-tsig-key
        tsigKeyValue:
          type: string
          description: The value of the TSIG key for the zone. REQUIRED.
          example: base64-encoded-tsig-secret
        description:
          type: string
          description: A description of this key. Optional.
          example: TSIG key for zone transfers
        tsigAlgorithm:
          type: string
          description: The hash algorithm used to generate the TSIG key. REQUIRED.
          enum:
            - hmac-md5
            - hmac-sha1
            - hmac-sha224
            - hmac-sha256
            - hmac-sha384
            - hmac-sha512
          example: hmac-sha256
      required:
        - tsigKeyName
        - tsigKeyValue
        - tsigAlgorithm
    NotifyAddress:
      type: object
      description: Each Notify Address DTO defines an address that gets notified when there are updates to a Primary Zone
      properties:
        notifyAddress:
          type: string
          description: The IP address that is notified when the primary zone is updated. IPv4 address. REQUIRED.
          format: ipv4
          example: 192.168.1.100
        description:
          type: string
          description: A description of this address. Optional.
          example: Primary DNS server notification address
      required:
        - notifyAddress
    TransferStatusDetails:
      type: object
      description: The Transfer Status Details contains the Zone Transfer Status Details
      properties:
        lastRefresh:
          type: string
          format: date-time
          description: Displays when the last transfer attempt or refresh was. Date/Time formatted in ISO 8601 format, UTC offset based on customer-specified time zone
          example: '2025-02-20T08:40:00Z'
        nextRefresh:
          type: string
          format: date-time
          description: Displays when the next transfer attempt or refresh is. Date/Time formatted in ISO 8601 format, UTC offset based on customer-specified time zone
          example: '2025-02-20T09:40:00Z'
        lastRefreshStatus:
          type: string
          description: Displays the status of the last transfer that was attempted
          enum:
            - IN_PROGRESS
            - FAILED
            - SUCCESSFUL
          example: SUCCESSFUL
        lastRefreshStatusMessage:
          type: string
          description: Displays the last transfer's status message. This is currently shown as failure reason.
          example: Transfer completed successfully
  responses:
    Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorGeneric'
    Error5xx:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorGeneric'
    Error400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorGeneric'
    CreatedGeneric:
      description: Created
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Successful
          examples:
            Created:
              value:
                message: Successful
    AcceptedGeneric:
      description: Accepted
      headers:
        X-Task-Id:
          description: Task ID for tracking the operation progress
          schema:
            type: string
            example: task-12345
      content:
        application/json:
          schema:
            type: object
            properties: {}
          examples:
            Accepted:
              value: {}
    Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorGeneric'
    Error404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorGeneric'
  parameters:
    QueryParams:
      name: q
      in: query
      required: false
      schema:
        type: string
    Cursor:
      name: cursor
      in: query
      required: false
      schema:
        type: string
      description: |
        Cursor for pagination. Can be provided after the initial request to fetch the next, previous, first or last page(s) of results.
    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 100
      description: Maximum number of items to return per page
    Sort:
      name: sort
      in: query
      schema:
        type: string
      description: Field to sort results by
    Reverse:
      name: reverse
      in: query
      schema:
        type: boolean
        default: false
      description: Whether to reverse the sort order
    ZoneName:
      name: zoneName
      in: path
      required: true
      schema:
        type: string
      description: The name of the DNS zone
    RecordsType:
      name: records_type
      in: path
      required: true
      schema:
        type: string
      description: The DNS record type (e.g., A, CNAME, MX, TXT)
    Offset:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      description: The position in the list for the first returned element (0 based). The default value is 0.
    TaskSort:
      name: sort
      in: query
      schema:
        type: string
        enum:
          - CODE
          - CONTENT_TYPE
          - EXTENSIONS
          - HAS_DATA
          - DATE
        default: CODE
      description: The sort column used to order the list. Valid sort fields are CODE, CONTENT_TYPE, EXTENSIONS, HAS_DATA, DATE. The default value is CODE.
    TaskType:
      name: taskType
      in: query
      required: false
      schema:
        type: string
        enum:
          - reporting
      description: For viewing reporting tasks user needs to set its value to "reporting". By default only Rest API configurations tasks will be returned as per current functionality.
    TaskId:
      name: taskId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Task ID from x-task-id header
