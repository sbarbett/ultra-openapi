openapi: 3.0.3
info:
  title: UltraDNS API Documentation
  description: |
    # Introduction

    The UltraDNS REST API lets you manage DNS resources programmatically and test changes in a non-production environment.

    ## What you can do
    - Create and test API calls in a controlled test environment that mimics production.
    - Manage UltraDNS objects using REST requests.
    - Use the API as an alternative to the UltraDNS Managed Services Portal.

    ## Base URLs

    | Environment | Base URL | Purpose |
    |-------------|----------|---------|
    | Customer test | `https://test-api.ultradns.com` | Configuration and change testing |
    | Production | `https://api.ultradns.com` | Configuration and changes |

    All URI examples use the production URL. You may test calls against the customer test environment. The test environment has limitations; contact customer support for details.

    ## Request and response formats

    The API accepts and returns XML or JSON. JSON is preferred and is the default response format (even if the request is XML).

    | Header | Values | Purpose |
    |--------|--------|---------|
    | `Content-Type` | `application/json` or `application/xml` | Request body format |
    | `Accept` | `application/json` or `application/xml` | Desired response format |

    JSON Patch is supported for updates. Use `PATCH` with `Content-Type: application/json-patch+json`.

    ## API versioning

    To target a particular API version, include it it in the request path (i.e. `/v1/`, `/v2/` or `/v3`). When omitted, the most recent production version is used.

    Some calls differ by version:

    | API area | Behavior |
    |----------|----------|
    | Directional update | Updating a Directional Pool record-level TTL is not supported with `/v1/`. |
    | Deprecated ISO codes | Directional API calls using `/v1/` return different Geo-ISO details than `/v2` (default). |
    | Batch API | Batch API calls work **only** with `/v1/`. |
    | Batch Query API | Batch Query API calls work **only** with `/v1/`. |
    | Reporting APIs | Reporting APIs no longer require a separate "Authentication" token; use the standard REST API authorization token. |
    | Reporting APIs (link headers) | Response Link Headers for additional report results work **only** with `/v1/`. |

    ## Data Transfer Objects (DTOs)

    A Data Transfer Object (DTO) is the structured data sent or returned by an API call. Fields may be simple types, comma-separated lists (where allowed), or nested DTOs.

    Example (Primary Zone creation): the Zone Create DTO includes:
    - `properties` — Zone API properties.
    - `primaryCreateInfo` — Primary Zone settings.

    Nested DTOs can include structures such as Restrict IP or Notify Address.

    ## Responses

    All operations return an HTTP status code.

    | HTTP | Meaning | Typical use | Notes |
    |------|---------|-------------|-------|
    | 200 | OK | `GET`, `PUT`, `PATCH` | Returns the requested or updated DTO when applicable. |
    | 201 | Created | `POST` | Resource created. |
    | 202 | Accepted | Async operations | Includes `X-Task-ID` header; work is pending. |
    | 204 | No Content | `DELETE` | Deletion succeeded; no body. |

    Errors return `4xx` or `5xx` with an UltraDNS error payload:

    ```json
    [
      {
        "errorCode": 1801,
        "errorMessage": "Zone does not exist in the system."
      }
    ]
    ```

    System-level database errors may return code `9999` with a system error message.

    ## 429 Too Many Requests

    Returned when too many requests come from the same customer or IP address in a short period, to protect service reliability and security.

    Tips to avoid 429 responses:

    * Reuse your authorization token instead of creating a new token for every call (tokens are reusable for up to 1 hour).
    * Add a short delay (0.5–1.0 seconds) between consecutive requests when necessary.

    ## Supported record types

    | Record Type                                 | ID  |
    | ------------------------------------------- | --- |
    | A — IPv4 Address                            | 1   |
    | NS — Name Server                            | 2   |
    | CNAME — Canonical Name                      | 5   |
    | SOA — Start of Authority                    | 6   |
    | PTR — Pointer                               | 12  |
    | HINFO — Host Information                    | 13  |
    | MX — Mail Exchange                          | 15  |
    | TXT — Text                                  | 16  |
    | RP — Responsible Person                     | 17  |
    | AAAA — IPv6 Address                         | 28  |
    | LOC — Location                              | 29  |
    | SRV — Service Locator                       | 33  |
    | NAPTR — Naming Authority Pointer            | 35  |
    | DS — Delegation Signer                      | 43  |
    | SSHFP — SSH Fingerprint                     | 44  |
    | TLSA — TLS Association                      | 52  |
    | SVCB — Service Binding                      | 64  |
    | HTTPS — HTTPS Service Binding               | 65  |
    | SPF — Sender Policy Framework               | 99  |
    | CAA — Certification Authority Authorization | 257 |
    | APEXALIAS — Apex Alias                      | 65282 |
  version: 0.1.2
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  contact:
    name: UltraDNS
    url: https://dns.ultraproducts.support
    email: ultradnssupport@digicert.com
  termsOfService: https://www.digicert.com/security-terms
servers:
  - url: https://api.ultradns.com
    description: Primary UltraDNS API
  - url: https://test-api.ultradns.com
    description: Test UltraDNS API
security:
  - oauth2: []
tags:
  - name: Authorization
    description: |
      Obtain and refresh auth tokens via the OAuth 2.0 Resource Owner Password Credentials (ROPC) grant. Requires an UltraDNS API username and password.
  - name: Platform
    description: |
      Health, version, and connectivity checks for monitoring and compatibility.
  - name: Tasks
    description: |
      Track asynchronous operations (e.g., exports, snapshots). 202 responses include an `X-Task-ID` header; use it to check status and retrieve results.
  - name: Zones
    description: |
      Manage DNS zones: create, read, update, delete; export zone files; capture snapshots.
  - name: Records
    description: |
      Manage resource record sets (RRSets) within a zone (list, read, upsert via `rdata` and TTL, delete). `rdata` uses the BIND presentation format.
  - name: Account Settings
    description: |
      Manage account-level settings including notifications, security preferences, and push notifications. Configure various account settings such as zone transfer notifications, usage notifications, and webhook endpoints.
paths:
  /authorization/token:
    post:
      tags:
        - Authorization
      summary: Manage Auth Token
      description: |
        Issue or refresh an UltraDNS API access token.

        **Notes**
        - Repeated failed logins may trigger temporary lockout.
        - Only one refresh token is valid at a time; obtaining new credentials invalidates the previous refresh token.
        - Users with “API Only Access” can authenticate to the API but cannot sign in to the Portal.
      operationId: manageAuthToken
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
              properties:
                grant_type:
                  type: string
                  enum:
                    - password
                    - refresh_token
                  description: The OAuth2 grant type to use for authentication
                username:
                  type: string
                  description: The username for your account. Required when grant_type is 'password'.
                password:
                  type: string
                  description: The password for your account. Required when grant_type is 'password'.
                refresh_token:
                  type: string
                  description: The Refresh Value token taken from the Authorization API call. Required when grant_type is 'refresh_token'.
                expire_in:
                  type: integer
                  description: Set the duration, in seconds, in which the Refresh Token will expire. Only applies to refresh_token grant type. Optional field - if not provided, defaults to 604800 (7 days). Allowed Value = 1 - 604800
            examples:
              Password Grant:
                summary: Authenticate with username and password
                value:
                  grant_type: password
                  username: doc-example
                  password: mypass123
                  expire_in: 86400
              Refresh Token Grant:
                summary: Refresh access token using refresh token
                value:
                  grant_type: refresh_token
                  refresh_token: 2b217543b15fdedffe95387ff0a383d47ab37615d7
                  expire_in: 86400
      responses:
        '200':
          description: Refresh Token / Generate Auth Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
              examples:
                Generate Auth Token:
                  value:
                    accessToken: eolraOeTINu6WHeS.zUc4sS1vUKjzmKe9QyJecMeG1XN1TqwI3eXGC0sRbco.3VjD74_dMLWk2ec3vUXPUcIb4zH3K4fS
                    access_token: eolraOeTINu6WHeS.zUc4sS1vUKjzmKe9QyJecMeG1XN1TqwI3eXGC0sRbco.3VjD74_dMLWk2ec3vUXPUcIb4zH3K4fS
                    expiresIn: '3600'
                    expires_in: '3600'
                    refreshToken: 2b217543b15fdedffe95387ff0a383d47ab37615d7
                    refresh_token: 2b217543b15fdedffe95387ff0a383d47ab37615d7
                    tokenType: Bearer
                    token_type: Bearer
                    username: doc-example
                Refresh Token:
                  value:
                    accessToken: q3hpnHtaHHfLzTq_.HFBMZ45a99dt5H_jOh0tLqrmDVhyCvE7EHlOe7DZ2F8.YvogkldtGkb9fNJ_vihT2ORGQpM_kRU7
                    access_token: q3hpnHtaHHfLzTq_.HFBMZ45a99dt5H_jOh0tLqrmDVhyCvE7EHlOe7DZ2F8.YvogkldtGkb9fNJ_vihT2ORGQpM_kRU7
                    expiresIn: '3600'
                    expires_in: '3600'
                    refreshToken: 729dd9ba9ddaeab58fcdb9615f50f5dadd715f4d72
                    refreshTokenExpiresIn: '86400'
                    refresh_token: 729dd9ba9ddaeab58fcdb9615f50f5dadd715f4d72
                    refresh_token_expires_in: '86400'
                    tokenType: Bearer
                    token_type: Bearer
                    username: doc-example
        '401':
          $ref: '#/components/responses/Error401'
        5XX:
          $ref: '#/components/responses/Error5xx'
      security:
        - {}
  /version:
    get:
      tags:
        - Platform
      summary: Get Version
      description: The version call provides the version of the REST API currently in production. This call does not require an Authorization header to be specified, which allows it to be used to verify that there are no networking issues between a client and the REST API server.
      operationId: getVersion
      responses:
        '200':
          description: Get Version
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    example: 3.108.0-20250804151109.a1bbd8c
              examples:
                Get Version:
                  value:
                    version: 3.108.0-20250804151109.a1bbd8c
        5XX:
          $ref: '#/components/responses/Error5xx'
      security:
        - {}
  /status:
    get:
      tags:
        - Platform
      summary: Get Status
      description: The status call provides a simple way to determine if the REST API is running, and to make sure you are connecting to the UltraDNS Portal with proper authorization.
      operationId: getStatus
      responses:
        '200':
          description: Get Status
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Good
              examples:
                Get Status:
                  value:
                    message: Good
        '401':
          $ref: '#/components/responses/Error401'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /tasks:
    get:
      tags:
        - Tasks
      summary: Get the List of Tasks
      description: Retrieves a list of all tasks for the current user with optional filtering and pagination.
      operationId: getTasks
      parameters:
        - $ref: '#/components/parameters/QueryParams'
          description: |
            The query used to construct the list. Query operators are code and hasData.

            Valid values for code are:
            - PENDING
            - IN_PROCESS
            - COMPLETE
            - ERROR

            Valid values for hasData are TRUE or FALSE. Default value of hasData is NULL. Query operators need be followed by a colon ( : ).

            Example:
            - q="code:COMPLETE"
            - q="hasData:TRUE"
            - q="code:COMPLETE hasData:TRUE"
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/TaskSort'
        - $ref: '#/components/parameters/Reverse'
        - $ref: '#/components/parameters/TaskType'
      responses:
        '200':
          description: List of tasks retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TaskList'
                  - $ref: '#/components/schemas/ReportTaskList'
              examples:
                Task List:
                  summary: Regular task list (default)
                  value:
                    tasks:
                      - taskId: 0b40c7dd-748d-4c49-8506-26f0c7d2ea9c
                        code: COMPLETE
                        message: Processing complete
                        resultUri: /tasks/0b40c7dd-748d-4c49-8506-26f0c7d2ea9c/result
                    queryInfo:
                      q: code:COMPLETE
                      sort: CODE
                      reverse: false
                      limit: 100
                    resultInfo:
                      totalCount: 1
                      offset: 0
                      returnedCount: 1
                Report Task List:
                  summary: Report task list (when taskType=reporting)
                  value:
                    tasks:
                      - taskId: ZQV-013d3c5c-7b14-4ff0-b4af-453b76a827b6
                        code: COMPLETE
                        message: Completed ZQV Report Successfully.
                        lastModifiedDateTime: '2016-08-26T12:33:22.000Z'
                        resultUri: https://api.ultradns.com/reports/tasks/ZQV-013d3c5c-7b14-4ff0-b4af-453b76a827b6
                      - taskId: PQV-003f098b-a2df-437e-8482-65e8d93b4858
                        code: COMPLETE
                        message: Completed PQVReport Successfully.
                        lastModifiedDateTime: '2016-08-26T12:33:22.000Z'
                        resultUri: https://api.ultradns.com/reports/tasks/PQV-003f098b-a2df-437e-8482-65e8d93b4858
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /tasks/{taskId}:
    get:
      tags:
        - Tasks
      summary: Get the Status of a Task
      description: Retrieves the current status of a background task.
      operationId: checkTask
      parameters:
        - $ref: '#/components/parameters/TaskId'
      responses:
        '200':
          description: Task status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
              examples:
                Check Task:
                  value:
                    taskId: 605b23e4-edb9-4f23-ae2d-33fe24d6033f
                    code: COMPLETE
                    message: domain.com. export completed.
                    resultUri: /tasks/605b23e4-edb9-4f23-ae2d-33fe24d6033f/result
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
    delete:
      tags:
        - Tasks
      summary: Delete a Task
      description: This call will remove information from the system for a task that has completed or is in an error-state.
      operationId: deleteTask
      parameters:
        - $ref: '#/components/parameters/TaskId'
      responses:
        '204':
          $ref: '#/components/responses/NoContentGeneric'
          description: Task deleted successfully
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /tasks/{taskId}/result:
    get:
      tags:
        - Tasks
      summary: Get the Results of a Task
      description: Retrieves the final result of a completed background task.
      operationId: taskResult
      parameters:
        - $ref: '#/components/parameters/TaskId'
      responses:
        '200':
          description: Task result file downloaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
                    description: The task result content as a string
                required:
                  - content
              description: The task result as a downloadable file. The filename will be the taskId and the content type will be determined by the background task.
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones:
    post:
      tags:
        - Zones
      summary: Create a Zone
      description: The Create Zone API allows you to create a Primary, Secondary, or Alias Zone, and furthermore, allows you to create a Zone "from scratch" by copying another zone via an uploaded file or by Zone transfer.
      operationId: createZone
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneCreate'
            examples:
              New Primary Zone:
                summary: Create a Primary Zone from scratch
                value:
                  properties:
                    name: primary-example.com.
                    accountName: example
                    type: PRIMARY
                  primaryCreateInfo:
                    forceImport: true
                    createType: NEW
                  changeComment: Created as agreed
              New Primary Zone Copied from Another Zone:
                summary: Create a Primary Zone by copying an existing zone
                value:
                  properties:
                    name: copy-example.com.
                    accountName: example
                    type: PRIMARY
                  primaryCreateInfo:
                    forceImport: true
                    createType: COPY
                    originalZoneName: example.cm.
          multipart/form-data:
            description: |
              Create a zone by uploading a BIND file along with zone creation parameters. Use this when creating a zone from a BIND file upload.

              **Important Notes:**
              - The `zone` field should contain the zone creation parameters as JSON
              - The `file` field should contain the BIND file content
              - Both fields are required for file uploads
            schema:
              type: object
              properties:
                zone:
                  type: object
                  description: |
                    Zone creation parameters in JSON format. Must include createType: "UPLOAD" for file uploads.
                  example:
                    properties:
                      name: example.com.
                      accountName: example
                      type: PRIMARY
                    primaryCreateInfo:
                      forceImport: true
                      createType: UPLOAD
                    changeComment: Created from BIND file upload
                file:
                  type: string
                  format: binary
                  description: |
                    The BIND file containing zone data. The file should contain DNS records in BIND format.

                    **BIND File Format:**
                    - Each line represents a DNS record
                    - Records can span multiple lines using parentheses
                    - Comments start with semicolon (;)
                    - $ORIGIN directive sets the zone origin
                    - Records without owner name inherit from the last stated owner
                    - Records with owner name reset the owner context
                  example: |
                    ;File created: 12/04/2019 12:07
                    ;Record count: 20
                    $ORIGIN example.com.
                    @    86400    IN    SOA udns1.ultradns.net. BindZone\.testzone.example.biz. (
                            2019041222    ;Serial
                            86400        ;Refresh
                            86400        ;Retry
                            86400        ;Expire
                            86400        ;Minimum
                        )
                    @    86400    IN    NS    udns1.ultradns.net.
                    @    86400    IN    NS    udns2.ultradns.net.
                    www    300    IN    A    192.168.1.1
                    mail   300    IN    A    192.168.1.2
                    @      300    IN    MX   10 mail.example.com.
              required:
                - zone
                - file
            encoding:
              zone:
                contentType: application/json
              file:
                contentType: text/plain
      responses:
        '201':
          $ref: '#/components/responses/CreatedGeneric'
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        5XX:
          $ref: '#/components/responses/Error5xx'
    get:
      tags:
        - Zones
      summary: List Zones
      description: |
        Retrieves all zones in your account. The response returns an array of zone objects, each including details such as zone name, status, default TTL, and name servers.

        ## Query Parameter (q)

        The `q` parameter allows filtering zones using various operators. Multiple operators can be combined using the `+` separator.
        Format: `query_param:value+query_param_2:value`

        **Query Operators:**

        - **name**: Name of the zone (allowing for partial string matches)
        - **zone_type**: Returns zones of an identified type. If not specified, all zone types are returned
        - **zone_status**: Returns zones with the identified status. Active zones are returned if not specified
        - **account_name**: Returns zones based upon the account. If not specified, zones of all accounts that the user has access to will be returned
        - **network**: Only applicable for accounts with the UltraDNS2 feature enabled. Returns zones on specific networks

        **Zone Type Values:**

        | Value | Description |
        |-------|-------------|
        | ALIAS | Alias zones |
        | PRIMARY | Primary zones |
        | SECONDARY | Secondary zones |

        **Zone Status Values:**

        | Value | Description |
        |-------|-------------|
        | ACTIVE | Active zones only |
        | SUSPENDED | Suspended zones only |
        | ALL | All zones regardless of status |

        **Network Values:**

        | Value | Description |
        |-------|-------------|
        | ultra1 | Standard UltraDNS network |
        | ultra2 | UltraDNS2 service network |

        **Query Examples:**
        - `zone_status:ALL+network:ultra2` - All zones on UltraDNS2 network
        - `zone_type:PRIMARY+account_name:myaccount` - Primary zones for specific account
        - `name:example+zone_status:ACTIVE` - Active zones with "example" in the name
      operationId: listZones
      parameters:
        - $ref: '#/components/parameters/QueryParams'
        - $ref: '#/components/parameters/Cursor'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Reverse'
      responses:
        '200':
          description: List Zones
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZonesList'
              examples:
                List Zones:
                  value:
                    queryInfo:
                      q: zone_status:ALL network:ultra2
                      sort: name
                      reverse: false
                      limit: 50
                    cursorInfo:
                      next: c3ViLnVsdHJhZG5zMnRlc3QuY29tLjpORVhU
                      last: fjpMQVNU
                    zones:
                      - properties:
                          name: testzone1.com.
                          accountName: testaccount1
                          type: PRIMARY
                          dnssecStatus: SIGNED
                          status: ACTIVE
                          owner: testuser1
                          resourceRecordCount: 4826
                          lastModifiedDateTime: '2025-08-22T13:12:00Z'
                          ultra2: true
                      - properties:
                          name: testzone2.com.
                          accountName: testaccount2
                          type: PRIMARY
                          dnssecStatus: UNSIGNED
                          status: ACTIVE
                          owner: testuser2
                          resourceRecordCount: 9
                          lastModifiedDateTime: '2025-08-21T13:26:00Z'
                          ultra2: true
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/export:
    post:
      tags:
        - Zones
      summary: Export a Zone
      description: Exporting a Zone will create a task to export the zone details into a BIND file. Once the task has been completed the BIND file can be downloaded.
      operationId: exportZone
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                zoneNames:
                  type: array
                  items:
                    type: string
                  description: The name or names of the zones that are being exported, with or without the trailing dot.
                  example:
                    - name.com
                    - name2.com.
              required:
                - zoneNames
            examples:
              Export Single Zone:
                summary: Export a single zone
                value:
                  zoneNames:
                    - example.com
              Export Multiple Zones:
                summary: Export multiple zones
                value:
                  zoneNames:
                    - name.com
                    - name2.com.
      responses:
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/snapshot-eligible:
    get:
      tags:
        - Zones
      summary: List Zone Snapshot Eligibility
      description: Returns the list of eligible zones and the existing Snapshot date with description, if any exist.
      operationId: listZoneSnapshotEligible
      parameters:
        - $ref: '#/components/parameters/QueryParams'
          description: |
            The query used to construct the list. Format: `query_param:value+query_param_2:value`

            Example: `name:abc`

            Query operators are:

            - **name** - Name of the zone (allowing for partial string matches).
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Reverse'
      responses:
        '200':
          description: List Zone Snapshot Eligibility
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneSnapshotEligibleList'
              examples:
                List Zone Snapshot Eligibility:
                  value:
                    zones:
                      - zoneName: abc.com.
                        snapshots:
                          - date: '2018-09-24T14:59:18.208Z'
                            description: Description for snapshot purpose
                      - zoneName: abc1.com.
                        snapshots:
                          - date: '2018-12-03T10:59:38.208Z'
                            description: Description for snapshot purpose
                    queryInfo:
                      q: name:abc
                      limit: 100
                      reverse: false
                      sort: name
                    resultInfo:
                      totalCount: 2
                      offset: 0
                      returnedCount: 2
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/{zoneName}:
    put:
      tags:
        - Zones
      summary: Update a Zone
      description: |
        The Update Zone call allows you to update certain aspects of either a Primary or a Secondary Zone. You cannot use this call to:

        - Update an Alias Zone.
        - Specify Primary Name Servers for a Primary zone.
        - Specify restrict IPs, TSIG, or Notify addresses for a Secondary Zone.

        As this is a FULL update (replacing data) for Primary Zone updates, you must include any necessary restrict IPs, Notify addresses, or Primary Name Servers that apply. Any data not included with the update will be deleted from the Primary Zone.
      operationId: updateZone
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneCreate'
            examples:
              Update Restrict IP for Primary Zone:
                summary: Update Restrict IP information for Primary Zone
                value:
                  properties:
                    name: example.com.
                    accountName: example
                    type: PRIMARY
                  primaryCreateInfo:
                    restrictIPList:
                      - startIP: 10.20.30.40
                        endIP: 20.20.20.20
                        comment: Comment
                  changeComment: Updating zone
              Update TSIG and Notify for Primary Zone:
                summary: Update TSIG and Notify information for Primary Zone
                value:
                  properties:
                    name: example.com.
                    accountName: example
                    type: PRIMARY
                  primaryCreateInfo:
                    tsig:
                      tsigKeyName: Key
                      tsigKeyValue: This would be a hash if it was real
                      description: TSIG for primary-example.com
                      tsigAlgorithm: hmac-sha256
                    notifyAddresses:
                      - notifyAddress: 2.4.5.6
                        description: East Coast Server
                      - notifyAddress: 5.6.7.8
                        description: West Coast Server
                  changeComment: Updating TSIG and notify addresses
              Update Primary Name Servers for Secondary Zone:
                summary: Update Primary Name Server information for Secondary Zone
                value:
                  properties:
                    name: example.com.
                    accountName: example
                    type: SECONDARY
                  secondaryCreateInfo:
                    primaryNameServers:
                      nameServerIpList:
                        nameServerIP1:
                          ip: 1.2.3.4
                          tsigKey: key1
                          tsigKeyValue: value1
                        nameServerIP2:
                          ip: 2.4.5.6
                          tsigKey: key2
                          tsigKeyValue: value2
                        nameServerIP3:
                          ip: 3.4.5.6
                          tsigKey: key3
                          tsigKeyValue: value3
                  changeComment: Updating primary name servers
      responses:
        '200':
          description: Zone updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
    patch:
      tags:
        - Zones
      summary: Partially Update a Zone
      description: |
        The Partial Update a Zone call is used to:

        - Update the restrictIPs, TSIG key, and/or Notify Address information for a Primary zone without having to explicitly list all of them. Any Restrict IPs, TSIGs or Notify Addresses not included in the call are retained on the server.
        - Update the Primary Name Servers for a Secondary zone without having to explicitly list all of them. Any Primary Name Servers not included in the call are retained on the server.

        Alias zones cannot be updated.
      operationId: partiallyUpdateZone
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneCreate'
            examples:
              Partial Update Restrict IP for Primary Zone:
                summary: Partially update restrict IP information for Primary Zone
                value:
                  properties:
                    name: example.com.
                    accountName: example
                    type: PRIMARY
                  primaryCreateInfo:
                    restrictIPList:
                      - startIP: 10.20.30.40
                        endIP: 20.20.20.20
                        comment: New restrict IP range
                  changeComment: Adding new restrict IP range
              Partial Update TSIG for Primary Zone:
                summary: Partially update TSIG information for Primary Zone
                value:
                  properties:
                    name: example.com.
                    accountName: example
                    type: PRIMARY
                  primaryCreateInfo:
                    tsig:
                      tsigKeyName: NewKey
                      tsigKeyValue: This would be a hash if it was real
                      description: New TSIG key for example.com
                      tsigAlgorithm: hmac-sha256
                  changeComment: Updating TSIG key
              Partial Update Primary Name Servers for Secondary Zone:
                summary: Partially update primary name servers for Secondary Zone
                value:
                  properties:
                    name: example.com.
                    accountName: example
                    type: SECONDARY
                  secondaryCreateInfo:
                    primaryNameServers:
                      nameServerIpList:
                        nameServerIP1:
                          ip: 1.2.3.4
                          tsigKey: key1
                          tsigKeyValue: value1
                  changeComment: Adding new primary name server
          application/json-patch+json:
            schema:
              type: array
              description: JSON Patch operations for partial zone updates
              items:
                type: object
                properties:
                  op:
                    type: string
                    enum:
                      - add
                      - remove
                      - replace
                      - copy
                      - move
                      - test
                    description: The operation to be performed
                  path:
                    type: string
                    description: A JSON Pointer string specifying a location within the target document
                  value:
                    description: The value to be used within the operations
                required:
                  - op
                  - path
            examples:
              JSON Patch Example:
                summary: JSON Patch operations for zone updates
                value:
                  - op: replace
                    path: /primaryCreateInfo/tsig/tsigKeyName
                    value: NewTSIGKey
                  - op: add
                    path: /primaryCreateInfo/restrictIPList/-
                    value:
                      startIP: 192.168.1.100
                      endIP: 192.168.1.200
                      comment: New IP range
      responses:
        '200':
          description: Zone partially updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zone'
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
    get:
      tags:
        - Zones
      summary: List Zone Properties
      description: Retrieves metadata for a specific zone, including record count, name servers, status, type, and other zone-level properties.
      operationId: listZoneProperties
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      responses:
        '200':
          description: List Zone Properties
          content:
            application/json:
              schema:
                type: object
                properties:
                  inherit:
                    type: string
                    example: ALL
                  properties:
                    $ref: '#/components/schemas/ZoneProperties'
                  registrarInfo:
                    $ref: '#/components/schemas/RegistrarInfo'
              examples:
                List Zone Properties:
                  value:
                    inherit: ALL
                    properties:
                      accountName: postman-example
                      dnssecStatus: UNSIGNED
                      lastModifiedDateTime: '2025-06-17T23:48:00Z'
                      name: domain.com.
                      owner: postman-example
                      resourceRecordCount: 7
                      status: ACTIVE
                      type: PRIMARY
                    registrarInfo:
                      nameServers:
                        missing:
                          - pdns1.ultradns.net.
                          - pdns2.ultradns.net.
                          - pdns3.ultradns.org.
                          - pdns4.ultradns.org.
                          - pdns5.ultradns.info.
                          - pdns6.ultradns.co.uk.
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
    delete:
      tags:
        - Zones
      summary: Delete a Zone
      description: The Delete Zone API allows you to delete any zone you have the proper authority to delete. You cannot delete a primary zone if it has an Alias zone.
      operationId: deleteZone
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneDelete'
            examples:
              Delete Zone with Change Comment:
                summary: Delete zone with a change comment
                value:
                  changeComment: Deleting Zone as agreed
      responses:
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '204':
          $ref: '#/components/responses/NoContentGeneric'
          description: Zone deleted successfully
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/{zoneName}/transfer:
    post:
      tags:
        - Zones
      summary: Request Zone Transfer
      description: The Request Zone Transfer call sends an AXFR request through a Secondary Zone, to the primary name server in order to update the Secondary Zone with information from the Primary Zone.
      operationId: requestZoneTransfer
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      requestBody:
        required: false
      responses:
        '200':
          description: Zone transfer completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Zone transfer completed successfully
              examples:
                Transfer Completed:
                  value:
                    message: Zone transfer completed successfully
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/{zoneName}/convert:
    post:
      tags:
        - Zones
      summary: Convert a Zone
      description: The Convert Zone call converts a Secondary Zone into a Primary Zone.
      operationId: convertZone
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                changeComment:
                  type: string
                  description: Optional comment for the zone conversion
                  example: Converting zone 12/05/2020
            examples:
              Convert Zone with Change Comment:
                summary: Convert Zone with Change Comment
                value:
                  changeComment: Converting zone 12/05/2020
      responses:
        '201':
          description: Zone conversion completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Zone converted successfully
              examples:
                Conversion Completed:
                  value:
                    message: Zone converted successfully
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/{zoneName}/unalias:
    post:
      tags:
        - Zones
      summary: Unalias a Zone
      description: |
        Unaliasing a zone is the process of converting an Alias Zone into a Primary Zone. When you unalias a zone, the following changes happen:

        - All of the data and zone configuration information is copied from the Primary to the Alias.
        - The Alias is converted into a Primary zone.
        - Any correlation between the original Primary and new Primary (formerly the Alias) is removed; the two are now wholly separate Primary zones.
      operationId: unaliasZone
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                changeComment:
                  type: string
                  description: An optional field allowing users to create a comment for a zone operation using up to 512 characters of free text, which can be viewed and searched for via the Audit Log Report. Not applicable for Batch or JSON Patch calls.
                  maxLength: 512
                  example: Unalias this zone. No longer required.
            examples:
              Unalias Zone with Change Comment:
                summary: Unalias Zone with Change Comment
                value:
                  changeComment: Unalias this zone. No longer required.
      responses:
        '200':
          description: Zone unalias completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Zone unaliased successfully
              examples:
                Unalias Completed:
                  value:
                    message: Zone unaliased successfully
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/{zoneName}/suspend:
    post:
      tags:
        - Zones
      summary: Suspend a Zone
      description: |
        Suspending a zone allows you to temporarily stop serving data for a zone without deleting that zone. When you suspend a zone, the following changes happen:

        - The zone cannot be updated via a PUT or PATCH
        - Performing a GET will still return zone data
      operationId: suspendZone
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                changeComment:
                  type: string
                  description: An optional field allowing users to create a comment for a zone operation using up to 512 characters of free text, which can be viewed and searched for via the Audit Log Report. Not applicable for Batch or JSON Patch calls.
                  maxLength: 512
                  example: Suspend this zone. No longer active.
            examples:
              Suspend Zone with Change Comment:
                summary: Suspend Zone with Change Comment
                value:
                  changeComment: Suspend this zone. No longer active.
      responses:
        '200':
          description: Zone suspended successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Zone suspended successfully
              examples:
                Suspend Completed:
                  value:
                    message: Zone suspended successfully
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/{zoneName}/snapshot:
    get:
      tags:
        - Zones
      summary: Get Snapshot of a Zone
      description: Get Snapshot of a Zone.
      operationId: getZoneSnapshot
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      responses:
        '200':
          description: Zone Snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneSnapshot'
              examples:
                Zone Snapshot:
                  value:
                    zoneName: 00-ben-doc-test.com
                    rrSets:
                      - ownerName: def.00-ben-doc-test.com.
                        rrtype: A (1)
                        ttl: 300
                        rdata:
                          - 204.74.99.100
                      - ownerName: 00-ben-doc-test.com.
                        rrtype: NS (2)
                        ttl: 500
                        rdata:
                          - udns1.ultradns.net.
                          - udns2.ultradns.net.
                      - ownerName: rd.00-ben-doc-test.com.
                        rrtype: A (1)
                        ttl: 300
                        rdata:
                          - 3.4.5.6
                        profile:
                          '@context': http://schemas.ultradns.com/RDPool.jsonschema
                          order: ROUND_ROBIN
                          description: rd pool
                    webForwards:
                      - guid: 090845B113499BEB
                        requestTo: abc.com.00-ben-doc-test.com/requestTo.html
                        defaultRedirectTo: http://abc.com/redirectTo.html
                        defaultForwardType: HTTP_301_REDIRECT
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
    post:
      tags:
        - Zones
      summary: Create a Snapshot of a Zone
      description: |
        Create a Snapshot of a Zone - Deletes previously saved Snapshots of the zone.

        **Important Notes:**
        - Snapshot activity is final and cannot be rolled-back.
        - A zone can have a maximum of one Snapshot at a time. A zone snapshot request will either create a Snapshot (if it does not already exist), or will overwrite the existing Snapshot (if it already exists).
        - Snapshot is only allowed for zones that meet the following criteria:
          - Snapshot only supports primary zones.
          - The zone should not have more than 50,000 records, including the allowed pool's resource records.
          - The zone should only have:
            - Basic Resource Records.
            - Resource Distribution Pools
            - Directional DNS Pools
            - Load Balancing pools
            - Simple Monitor / Failover pools
            - Simple Load Balancing pools
            - Web Forwarding
          - The zone should not have:
            - Mail Forwarding
          - Additionally, Snapshot does not support the following types of zones:
            - Signed zones
            - Secondary zones
            - Alias zones
            - Suspended zones
        - Snapshot is a background activity; it is highly recommended to refrain from performing any activity that could change the zone configuration while a Snapshot is in-progress. Doing so might lead to data inconsistency or other unexpected results.
        - A user with basic READ permissions on a zone and its resource records may be allowed to take a zone Snapshot.
      operationId: createZoneSnapshot
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: Snapshot description.
                  example: Backup snapshot before major changes
            example:
              description: Backup snapshot before major changes
      responses:
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
    delete:
      tags:
        - Zones
      summary: Delete the snapshot of a Zone
      description: Delete the snapshot of a Zone.
      operationId: deleteZoneSnapshot
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      responses:
        '204':
          $ref: '#/components/responses/NoContentGeneric'
          description: Snapshot deleted successfully
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/{zoneName}/restore:
    post:
      tags:
        - Zones
      summary: Restore the Zone Snapshot
      description: |
        Restore the Zone Snapshot.

        **Important Notes:**
        - Restore activity is final and cannot be rolled-back.
        - Restore is only allowed for zones that meet the following criteria:
          - Restore only supports primary zones.
          - The zone should not have more than 50,000 records, including the allowed pool's resource records.
          - The zone should only have:
            - Basic Resource Records.
            - Resource Distribution Pools
            - Directional DNS Pools
            - Load Balancing pools
            - Simple Monitor / Failover pools
            - Simple Load Balancing pools
            - Web Forwarding
          - The zone should not have:
            - Mail Forwarding
          - Additionally, Restore does not support the following types of zones:
            - Signed zones
            - Secondary zones
            - Alias zones
            - Suspended zones
        - If a Zone Snapshot contains a Directional (DIR) pool with Global Account Level GEO and Source IP groups, once the Restore operation is completed, the Account level GEO and Source IP groups will be converted to the local pool level groups.
        - To further clarify the previous point about the Restore functionality, a zone must also satisfy the above criteria at the time of the Restore operation. For example, if a zone was signed after a Snapshot was created, or a directional pool was added, or the number of records exceeded 50,000, the Restore operation will not be allowed.
        - Restore is a background activity; it is highly recommended to refrain from performing any activity that could change the zone configuration while a Restore is in-progress. Doing so might lead to data inconsistency or other unexpected results.
        - A user might require full READ, WRITE, UPDATE and DELETE permissions on the zone and all of its resource records to Restore a Snapshot.
      operationId: restoreZoneSnapshot
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      responses:
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/{zoneName}/rrsets:
    get:
      tags:
        - Records
      summary: List all RRSets in a Zone
      description: |
        This call provides a list of all RRSets in a zone, or if specific query parameters are used, a list of the RRSets in a zone that match the provided criteria.

        ## Query Parameter (q)

        The `q` parameter allows filtering RRSets using various operators. Multiple operators can be combined using the `+` separator.

        **Query Operators:**

        - **TTL**: Exact match for the TTL value. Only valid for RECORDS RRSets type; ignored for other kinds of RRSets.
        - **Owner**: Partial match to an owner name. Valid for all RRSets.
        - **Value**: Partial match for the rdata for a resource record. Only valid for the RECORDS RRSet type; ignored for other kinds of RRSets.
        - **Kind** (defaults to ALL): The kind of RRSets or Pools that will be returned. One or more types can be specified if separated by commas.

        **Kind Values:**

        | Value | Meaning |
        |-------|---------|
        | ALL | All pools and records (same as RECORDS,POOLS) |
        | RECORDS | Only resource Records |
        | POOLS | All Pools |
        | RD_POOLS | Only RD Pools (Resource Distribution Pools) |
        | DIR_POOLS | Only Directional Pools |
        | SB_POOLS | Only Simple Load Balancing Pools |
        | TC_POOLS | Only Traffic Controller Pools |

        **Query Examples:**
        - `kind:RD_POOLS` - Return all RD Pools in the zone
        - `ttl:300+owner:test+kind:RECORDS` - Records with TTL 300 and owner containing "test"
        - `kind:RECORDS,RD_POOLS` - Both records and RD Pools
        - `owner:mail+kind:POOLS` - All pools with owner containing "mail"
      operationId: listRrsetsInZone
      parameters:
        - $ref: '#/components/parameters/ZoneName'
        - $ref: '#/components/parameters/QueryParams'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
          description: |
            The sort column used to define the order of the list. Valid values are:
            - OWNER (default)
            - TTL
            - TYPE (specifies the Record type)
          example: TYPE
        - $ref: '#/components/parameters/Reverse'
        - $ref: '#/components/parameters/SystemGeneratedStatus'
      responses:
        '200':
          description: List of RRSets in the zone
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RRSetsList'
              examples:
                List all RRSets:
                  summary: List all RRSets for a Zone
                  value:
                    zoneName: primary-example.com.
                    rrSets:
                      - ownerName: arecord.primary-example.com.
                        rrtype: A (1)
                        ttl: 500
                        rdata:
                          - 1.1.1.1
                      - ownerName: arecord.primary-example.com1.primary-example.com.
                        rrtype: A (1)
                        ttl: 500
                        rdata:
                          - 1.1.1.1
                      - ownerName: arecord.primarytest.com.primary-example.com.
                        rrtype: A (1)
                        ttl: 500
                        rdata:
                          - 2.2.2.2
                      - ownerName: arecord.primarytest.com.primary-example.com.
                        rrtype: AAAA (28)
                        ttl: 500
                        rdata:
                          - fdda:5cc1:23:4:0:0:0:1f
                    queryInfo:
                      q: kind:ALL
                      sort: OWNER
                      reverse: false
                      limit: 100
                    resultInfo:
                      totalCount: 4
                      offset: 0
                      returnedCount: 4
                List RRSets with Query Parameters:
                  summary: List RRSets with Query Parameters and systemGeneratedStatus
                  value:
                    zoneName: primary-example.com.
                    rrSets:
                      - ownerName: srvrecord.primarytest.com.primary-example.com.
                        rrtype: SRV (33)
                        ttl: 500
                        rdata:
                          - 1 5 81 test.primarytest.com.
                        systemGenerated:
                          - false
                          - false
                      - ownerName: spfrecord.primarytest.com.primary-example.com.
                        rrtype: SPF (99)
                        ttl: 500
                        rdata:
                          - '"spfrecorddata"'
                        systemGenerated:
                          - false
                      - ownerName: rprecord.primarytest.com.primary-example.com.
                        rrtype: RP (17)
                        ttl: 500
                        rdata:
                          - mail1.primary-example.com. text1.primary-example.com.
                        systemGenerated:
                          - false
                          - true
                      - ownerName: ptrrecord.primarytest.com.primary-example.com.
                        rrtype: PTR (12)
                        ttl: 500
                        rdata:
                          - test1.primarytest.com.primary-example.com.
                        systemGenerated:
                          - false
                    queryInfo:
                      q: ttl:300+owner:test+kind:RECORDS
                      sort: TYPE
                      reverse: true
                      limit: 100
                    resultInfo:
                      totalCount: 4
                      offset: 0
                      returnedCount: 4
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
    patch:
      tags:
        - Records
      summary: Create Zone via BIND File Upload
      description: |
        This call creates a Zone by uploading a BIND file containing the zone data. The Zone details must be attached in a BIND file and sent as multipart/form-data.

        **New Update**: The BIND Upload of zone feature now supports the usage of whitespaces as a hostname in the BIND file. Referring to RFC-1035, newly supported behavior is described as follows - "If an entry for an RR begins with a blank, then the RR is assumed to be owned by the last stated owner. If an RR entry begins with a <domain-name>, then the owner name is reset."

        **Important Notes:**
        - Do not add any JSON content or BIND file content as text in the request body
        - The file must be uploaded using multipart/form-data
      operationId: createZoneViaBindUpload
      parameters:
        - $ref: '#/components/parameters/ZoneName'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: |
                    The BIND file containing zone data. The file should contain DNS records in BIND format.

                    **BIND File Format:**
                    - Each line represents a DNS record
                    - Records can span multiple lines using parentheses
                    - Comments start with semicolon (;)
                    - $ORIGIN directive sets the zone origin
                    - Records without owner name inherit from the last stated owner
                    - Records with owner name reset the owner context
                  example: |
                    ;File created: 12/04/2019 12:07
                    ;Record count: 20
                    $ORIGIN upload-test.com.
                    @    86400    IN    SOA udns1.ultradns.net. BindZone\.testzone.example.biz. (
                            2019041222    ;Serial
                            86400        ;Refresh
                            86400        ;Retry
                            86400        ;Expire
                            86400        ;Minimum
                        )
                    owner3    300    IN    NS    ns1.nameserver.com.
                    @    86400    IN    NS    udns1.ultradns.net.
                    @    86400    IN    NS    udns2.ultradns.net.
                    owner1    100    IN    A    12.12.12.12
                    owner4    400    IN    CNAME    cname1.com.
                    owner13   800    IN    MB    mail2.upload-test.com.
                    owner14   900    IN    WKS    12.12.14.12 6 26
                    owner8    500    IN    PTR    test.addr2.com.
                    owner7    403    IN    HINFO    "32bits" "windows"
                    owner6    402    IN    MX    10 mail2.upload-test.com.
                    owner5    401    IN    TXT    "abcdefghijklmnopqrstabcdefghijklmnopqrst"
                    owner12   700    IN    RP    mail1.addr.arpa. text1.addr.arpa.
                    owner15   1000   IN    KEY    33 44 44 test
                    owner2    200    IN    AAAA    2001:db8:85a3:0:0:8a2e:370:7334
                    owner16   1100   IN    NXT    test1.upload-test.com. SSHFP
                    owner11   602    IN    SRV    1 5 81 test.addr.com.
                    owner9    600    IN    NAPTR    100 6 "u" "E2U+smtp" "!^.*$!mailto:information@addr.com!i" .
                    owner17   1200   IN    SSHFP    32 44 AD
                    owner10   601    IN    SPF    "aaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaax2rgthhyuiyaaa" "x2rgthhyuiy"
            encoding:
              file:
                contentType: text/plain
      responses:
        '202':
          description: BIND file upload accepted for processing
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/{zoneName}/rrsets/{recordType}:
    get:
      tags:
        - Records
      summary: List all RRSets by Type
      description: |
        This call allows you to list all RRSets of a particular Record type for a specified zone. This differs from the List all RRSets in a Zone because that call returns RRSets of records based on the kind of set or pool, while this call returns RRSets based on the record type.

        The Type can be a DNS record name (for example A, TXT, AAAA, SRV), or a number value that corresponds to a resource record type.

        ## Query Parameter (q)

        The `q` parameter allows filtering RRSets using various operators. Multiple operators can be combined using the `+` separator.

        **Query Operators:**

        - **TTL**: Exact match for the TTL value. Only valid for RECORDS RRSets type; ignored for other kinds of RRSets.
        - **Owner**: Partial match to an owner name. Valid for all RRSets.
        - **Value**: Partial match for the rdata for a resource record. Only valid for the RECORDS RRSet type; ignored for other kinds of RRSets.
        - **Kind** (defaults to ALL): The kind of RRSets or Pools that will be returned. One or more types can be specified if separated by commas.

        **Kind Values:**

        | Value | Meaning |
        |-------|---------|
        | ALL | All pools and records (same as RECORDS,POOLS) |
        | RECORDS | Only resource Records |
        | POOLS | All Pools |
        | RD_POOLS | Only RD Pools (Resource Distribution Pools) |
        | DIR_POOLS | Only Directional Pools |
        | SB_POOLS | Only Simple Load Balancing Pools |
        | TC_POOLS | Only Traffic Controller Pools |

        **Query Examples:**
        - `ttl:300+owner:test+kind:RECORDS` - Records with TTL 300 and owner containing "test"
        - `kind:RD_POOLS` - Return all RD Pools of this record type
        - `owner:mail+kind:POOLS` - All pools with owner containing "mail"
      operationId: listRrsetsByType
      parameters:
        - $ref: '#/components/parameters/ZoneName'
        - $ref: '#/components/parameters/RecordType'
        - $ref: '#/components/parameters/QueryParams'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
          description: |
            The sort column used to define the order of the list. Valid values are:
            - OWNER (default)
            - TTL
            - TYPE (specifies the Record type)
          example: OWNER
        - $ref: '#/components/parameters/Reverse'
        - $ref: '#/components/parameters/SystemGeneratedStatus'
      responses:
        '200':
          description: List of RRSets of the specified type in the zone
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RRSetsList'
              examples:
                List A Records:
                  summary: List all A records in a zone
                  value:
                    zoneName: example.com.
                    rrSets:
                      - ownerName: www.example.com.
                        rrtype: A (1)
                        ttl: 300
                        rdata:
                          - 192.168.1.1
                      - ownerName: mail.example.com.
                        rrtype: A (1)
                        ttl: 300
                        rdata:
                          - 192.168.1.2
                    queryInfo:
                      q: kind:RECORDS
                      sort: OWNER
                      reverse: false
                      limit: 100
                    resultInfo:
                      totalCount: 2
                      offset: 0
                      returnedCount: 2
                List TXT Records:
                  summary: List all TXT records in a zone
                  value:
                    zoneName: example.com.
                    rrSets:
                      - ownerName: example.com.
                        rrtype: TXT (16)
                        ttl: 3600
                        rdata:
                          - '"v=spf1 include:_spf.google.com ~all"'
                      - ownerName: _dmarc.example.com.
                        rrtype: TXT (16)
                        ttl: 3600
                        rdata:
                          - '"v=DMARC1; p=quarantine; rua=mailto:dmarc@example.com"'
                    queryInfo:
                      q: kind:RECORDS
                      sort: OWNER
                      reverse: false
                      limit: 100
                    resultInfo:
                      totalCount: 2
                      offset: 0
                      returnedCount: 2
                List MX Records:
                  summary: List all MX records in a zone
                  value:
                    zoneName: example.com.
                    rrSets:
                      - ownerName: example.com.
                        rrtype: MX (15)
                        ttl: 3600
                        rdata:
                          - 10 mail1.example.com.
                          - 20 mail2.example.com.
                    queryInfo:
                      q: kind:RECORDS
                      sort: OWNER
                      reverse: false
                      limit: 100
                    resultInfo:
                      totalCount: 1
                      offset: 0
                      returnedCount: 1
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /zones/{zoneName}/rrsets/{recordType}/{ownerName}:
    get:
      tags:
        - Records
      summary: List all RRSets of a Type for an Owner
      description: |
        This call returns a list of RRSets of a specified type for the Owner Name provided in the call.

        The identified Type can be any of the following:
        - A DNS record-type name (A, TXT, AAAA, SRV)
        - A number corresponding to a resource record type (from 1 to 65535)
        - The special reserved word "ANY", which will return all RRSets for the specified owner name

        Owner name can be a relative name (does not include the zone name), or an absolute name (includes the zone name).

        **Important Notes:**
        - Using a query parameter with an owner name is automatically a string-match search; it will return all owner names that contain the specified string
        - When the owner name is specified as part of the URI, the search will return only the RRSets for the owner name that exactly matches the specified name
      operationId: listRrsetsByTypeAndOwner
      parameters:
        - $ref: '#/components/parameters/ZoneName'
        - $ref: '#/components/parameters/RecordType'
        - $ref: '#/components/parameters/OwnerName'
        - $ref: '#/components/parameters/SystemGeneratedStatus'
      responses:
        '200':
          description: List of RRSets of the specified type for the specified owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RRSetsList'
              examples:
                List A Records for Owner:
                  summary: List all A records for a specific owner
                  value:
                    zoneName: domain.name.
                    rrSets:
                      - ownerName: test.domain.name.
                        rrtype: A (1)
                        ttl: 300
                        rdata:
                          - 9.8.7.6
                    queryInfo:
                      q: kind:RECORDS
                      sort: OWNER
                      reverse: false
                      limit: 100
                    resultInfo:
                      totalCount: 1
                      offset: 0
                      returnedCount: 1
                List All Records for Owner:
                  summary: List all RRSets for a specific owner using ANY type
                  value:
                    zoneName: domain.name.
                    rrSets:
                      - ownerName: test.domain.name.
                        rrtype: A (1)
                        ttl: 300
                        rdata:
                          - 9.8.7.6
                      - ownerName: test.domain.name.
                        rrtype: TXT (16)
                        ttl: 300
                        rdata:
                          - The quick brown fox jumped over the lazy dog
                          - Here is another TXT record in the RRSet
                    queryInfo:
                      q: kind:RECORDS
                      sort: OWNER
                      reverse: false
                      limit: 100
                    resultInfo:
                      totalCount: 2
                      offset: 0
                      returnedCount: 2
                List Records with System Generated Status:
                  summary: List records with systemGenerated attribute
                  value:
                    zoneName: domain.name.
                    rrSets:
                      - ownerName: test.domain.name.
                        rrtype: A (1)
                        ttl: 300
                        rdata:
                          - 9.8.7.6
                        systemGenerated:
                          - false
                      - ownerName: test.domain.name.
                        rrtype: TXT (16)
                        ttl: 300
                        rdata:
                          - The quick brown fox jumped over the lazy dog
                          - Here is another TXT record in the RRSet
                        systemGenerated:
                          - false
                          - false
                    queryInfo:
                      q: kind:RECORDS
                      sort: OWNER
                      reverse: false
                      limit: 100
                    resultInfo:
                      totalCount: 2
                      offset: 0
                      returnedCount: 2
                List Apex Alias Record:
                  summary: List APEXALIAS record for domain apex
                  description: |
                    Shows an Apex Alias record configured at the zone apex. Note that the rrtype 
                    shows "APEXALIAS (65282)" where 65282 is the numeric type code for Apex Alias records.
                  value:
                    zoneName: ultratest.biz.
                    rrSets:
                      - ownerName: ultratest.biz.
                        rrtype: APEXALIAS (65282)
                        ttl: 300
                        rdata:
                          - mywebfront.mysecretcdn.com.
                    queryInfo:
                      sort: OWNER
                      reverse: false
                      limit: 100
                    resultInfo:
                      totalCount: 1
                      offset: 0
                      returnedCount: 1
                List SSHFP Record:
                  summary: List SSHFP record for SSH fingerprint verification
                  description: |
                    Shows an SSHFP record used for SSH key verification. The rrtype shows "SSHFP (44)" 
                    where 44 is the numeric type code for SSHFP records. The rdata contains the algorithm, 
                    type, and fingerprint values.
                  value:
                    zoneName: ultratest.biz.
                    rrSets:
                      - ownerName: www.sshfp.com.ultratest.biz.
                        rrtype: SSHFP (44)
                        ttl: 100
                        rdata:
                          - 1 2 6E657573746172
                    queryInfo:
                      sort: OWNER
                      reverse: false
                      limit: 100
                    resultInfo:
                      totalCount: 1
                      offset: 0
                      returnedCount: 1
                List DS Record:
                  summary: List DS record for DNSSEC delegation signing
                  description: |
                    Shows a DS record used for DNSSEC delegation signing. The rrtype shows "DS (43)" 
                    where 43 is the numeric type code for DS records. The rdata contains the key tag, 
                    algorithm, digest type, and digest values.
                  value:
                    zoneName: ultratest.biz.
                    rrSets:
                      - ownerName: www.ultradstest.com.ultratest.biz.
                        rrtype: DS (43)
                        ttl: 800
                        rdata:
                          - 1000 8 1 A94A8FE5CCB19BA61C4C0873D391E987982FBBD3
                    queryInfo:
                      sort: OWNER
                      reverse: false
                      limit: 100
                    resultInfo:
                      totalCount: 1
                      offset: 0
                      returnedCount: 1
                List RD Pool A Record:
                  summary: List A record with Resource Distribution Pool
                  description: |
                    Shows an A record configured with an RD Pool profile. The profile contains
                    the pool configuration including ordering method and description.
                  value:
                    zoneName: andria.com.
                    rrSets:
                      - ownerName: redredrobin.andria.com.
                        rrtype: A (1)
                        ttl: 86400
                        rdata:
                          - 198.16.1.22
                          - 192.168.2.56
                        profile:
                          '@context': http://schemas.ultradns.com/RDPool.jsonschema
                          order: ROUND_ROBIN
                          description: T. migratorius
                    queryInfo:
                      q: kind:POOLS
                      sort: OWNER
                      reverse: false
                      limit: 100
                    resultInfo:
                      totalCount: 1
                      offset: 0
                      returnedCount: 1
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
    post:
      tags:
        - Records
      summary: Create RRSet for an Owner
      description: |
        The Create RRSet for an Owner call requires you to send an Resource Record Set (RRSet) DTO with the call. However, the ownerName and rrtype fields are not required because they are specified in the URI. If the DTO you send does include them, they will be ignored.
      operationId: createRrsetForOwner
      parameters:
        - $ref: '#/components/parameters/ZoneName'
        - $ref: '#/components/parameters/RecordType'
        - $ref: '#/components/parameters/OwnerName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RRSet'
            examples:
              A Record:
                summary: Create an A-type RRSet
                value:
                  ttl: 300
                  rdata:
                    - 1.2.3.4
              AAAA Record:
                summary: Create an AAAA-type RRSet
                value:
                  ttl: 300
                  rdata:
                    - 2001:db8::1
              MX Record:
                summary: Create an MX-type RRSet
                value:
                  ttl: 3600
                  rdata:
                    - 10 mail1.example.com.
                    - 20 mail2.example.com.
              TXT Record:
                summary: Create a TXT-type RRSet
                value:
                  ttl: 3600
                  rdata:
                    - '"v=spf1 include:_spf.google.com ~all"'
              CNAME Record:
                summary: Create a CNAME-type RRSet
                value:
                  ttl: 300
                  rdata:
                    - www.example.com.
              SRV Record:
                summary: Create an SRV-type RRSet
                value:
                  ttl: 300
                  rdata:
                    - 1 5 81 test.example.com.
              Apex Alias Record:
                summary: Create an APEXALIAS-type RRSet for domain apex
                description: |
                  Apex Alias provides CNAME functionality at the domain apex. 

                  **Important Constraints:**
                  - Can only be created at the apex of the domain (ownerName must match zoneName)
                  - Only one Apex Alias record can be configured per zone
                  - Cannot be created on signed zones
                  - Cannot coexist with both A and AAAA records at the zone apex
                  - pointsTo must be a fully qualified domain name
                  - pointsTo cannot be the same as the zone apex
                value:
                  ttl: 300
                  rdata:
                    - mywebfront.mysecretcdn.com.
              SSHFP Record:
                summary: Create an SSHFP-type RRSet for SSH fingerprint verification
                description: |
                  Secure Shell Fingerprint (SSHFP) record identifies SSH keys associated with a host.
                  Used for SSH key verification when connecting to SSH servers.

                  **Record Format:** "algorithm type fingerprint"
                  - **Algorithm**: 1=RSA, 2=DSS, 3=ECDSA, 4=Ed25519
                  - **Type**: 1=SHA-1, 2=SHA-256 (hash algorithm)
                  - **Fingerprint**: Hexadecimal representation of the hash result
                value:
                  ttl: 100
                  rdata:
                    - 1 2 6E657573746172
              DS Record:
                summary: Create a DS-type RRSet for DNSSEC delegation signing
                description: |
                  Delegation Signer (DS) record is used in DNSSEC to indicate that a delegated zone 
                  is digitally signed. The DS record is placed in the parent zone and points to a 
                  DNSKEY record in the child zone.

                  **Record Format:** "keytag algorithm digesttype digest"
                  - **Key Tag**: Key tag value of the DNSKEY RR (integer)
                  - **Algorithm**: 8=RSA/SHA-256, 13=ECDSA Curve P-256 with SHA-256
                  - **Digest Type**: 1=SHA-1, 2=SHA-256
                  - **Digest**: Hexadecimal string (40 characters for SHA-1, 64 for SHA-256)
                value:
                  ttl: 500
                  rdata:
                    - 1000 8 1 A94A8FE5CCB19BA61C4C0873D391E987982FBBD3
              RD Pool A Record:
                summary: Create an A-type RRSet with Resource Distribution Pool
                description: |
                  Resource Distribution (RD) Pool for A records with multiple IP addresses.

                  **Pool Ordering Options:**
                  - **FIXED**: Records appear in the same order all the time
                  - **RANDOM**: Order of the records is random on each request  
                  - **ROUND_ROBIN**: The order of the records changes on each request, in order

                  **Important Constraints:**
                  - RD Pools can only be defined for RRSets of type A (1) or AAAA (28)
                  - Multiple A or AAAA records for a single owner can only be defined if the owner is a pool
                  - It is legal to define an RD Pool with zero or one Rdata records
                value:
                  ttl: 300
                  rdata:
                    - 1.2.3.4
                    - 2.4.6.8
                    - 9.8.7.6
                  profile:
                    '@context': http://schemas.ultradns.com/RDPool.jsonschema
                    order: RANDOM
                    description: This is a great RD Pool
              RD Pool AAAA Record:
                summary: Create an AAAA-type RRSet with Resource Distribution Pool
                description: |
                  Resource Distribution (RD) Pool for AAAA records with multiple IPv6 addresses using round robin ordering.
                value:
                  ttl: 300
                  rdata:
                    - 2001:db8::1
                    - 2001:db8::2
                    - 2001:db8::3
                  profile:
                    '@context': http://schemas.ultradns.com/RDPool.jsonschema
                    order: ROUND_ROBIN
                    description: IPv6 RD Pool for load balancing
      responses:
        '201':
          $ref: '#/components/responses/CreatedGeneric'
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
    put:
      tags:
        - Records
      summary: Update an RRSet
      description: |
        This call allows you to update a set of resource records of a particular type (an RRSet) for a specified domain owner.

        Be sure to specify the TTL and ALL of the record information. Any resource records not included will be removed from the RRSet, and the TTL value specified at the account level for the record type (or global TTL value) will be used.
      operationId: updateRrset
      parameters:
        - $ref: '#/components/parameters/ZoneName'
        - $ref: '#/components/parameters/RecordType'
        - $ref: '#/components/parameters/OwnerName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RRSet'
            examples:
              Update A Record:
                summary: Update an A-type RRSet with multiple IPs
                value:
                  ttl: 300
                  rdata:
                    - 1.2.3.4
                    - 5.6.7.8
              Update MX Record:
                summary: Update an MX-type RRSet with new mail servers
                value:
                  ttl: 3600
                  rdata:
                    - 10 mail1.example.com.
                    - 20 mail2.example.com.
                    - 30 mail3.example.com.
              Update TXT Record:
                summary: Update a TXT-type RRSet with new SPF record
                value:
                  ttl: 3600
                  rdata:
                    - '"v=spf1 include:_spf.google.com include:_spf.salesforce.com ~all"'
              Update CNAME Record:
                summary: Update a CNAME-type RRSet
                value:
                  ttl: 300
                  rdata:
                    - new-target.example.com.
              Update SRV Record:
                summary: Update an SRV-type RRSet with new service endpoints
                value:
                  ttl: 300
                  rdata:
                    - 1 5 81 test1.example.com.
                    - 2 5 81 test2.example.com.
              Update RD Pool A Record:
                summary: Update an A-type RRSet with Resource Distribution Pool
                description: |
                  Full update (PUT) of an existing RD Pool. The RD Pool profile must be fully specified.
                  All existing records will be replaced with the provided ones.

                  **Use PUT for:**
                  - Changing the order of records in the RD Pool
                  - Removing records from the RD Pool
                  - Full replacement of the RD Pool configuration
                value:
                  ttl: 86400
                  rdata:
                    - 206.204.52.32
                    - 216.12.145.20
                    - 1.2.3.6
                    - 1.2.3.5
                  profile:
                    '@context': http://schemas.ultradns.com/RDPool.jsonschema
                    order: ROUND_ROBIN
                    description: www
      responses:
        '200':
          description: RRSet updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: RRSet updated successfully
              examples:
                Success Response:
                  value:
                    message: RRSet updated successfully
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
    patch:
      tags:
        - Records
      summary: Partially Update an RRSet
      description: |
        This call allows you to update some of the information in a set of resource records of a particular type (an RRSet) for a specified domain owner.

        This differs from the Update RRSet call in two ways:
        - If you do not specify the TTL, the existing TTL will continue to be used
        - Any resource records specified will be added to the RRSet. Existing records are not modified or removed (except for A and CNAME records)

        **Special Case for A and CNAME Records:**
        Since only a single resource record is allowed in an A or CNAME RRSet, if you perform a partial update, you will modify the single resource record.

        **RD Pool Partial Update Behavior:**
        - For partial updates (PATCH) that do not affect the order or description, the profile section is not required
        - To add a record to an existing RD Pool, a partial update (PATCH) can be performed
        - To change the order of records or remove records, use full update (PUT) instead

        **Two Update Methods Supported:**
        1. **Regular PATCH**: Send an RRSet DTO with Content-Type: application/json
        2. **JSON PATCH**: Send JSON Patch DTOs with Content-Type: application/json-patch+json
      operationId: partiallyUpdateRrset
      parameters:
        - $ref: '#/components/parameters/ZoneName'
        - $ref: '#/components/parameters/RecordType'
        - $ref: '#/components/parameters/OwnerName'
      requestBody:
        required: true
        content:
          application/json:
            description: |
              Regular PATCH request using RRSet DTO. Use this for simple partial updates.

              **Behavior:**
              - If TTL is not specified, existing TTL will be used
              - New rdata entries will be added to existing ones
              - For A and CNAME records, the single record will be modified
              - For RD Pools, new records can be added without specifying the profile
            schema:
              $ref: '#/components/schemas/RRSet'
            examples:
              Partial Update A Record:
                summary: Partially update an A record (modifies the single record)
                value:
                  ttl: 600
                  rdata:
                    - 1.2.3.4
              Partial Update MX Record:
                summary: Partially update MX records (adds to existing records)
                value:
                  rdata:
                    - 30 mail3.example.com.
              Partial Update TXT Record:
                summary: Partially update TXT records (adds to existing records)
                value:
                  ttl: 3600
                  rdata:
                    - '"additional TXT record"'
              Partial Update RD Pool - Add Record:
                summary: Add a record to an existing RD Pool
                description: |
                  Add a new record to an existing RD Pool without specifying the profile.
                  The existing pool configuration (order, description) will be preserved.
                value:
                  rdata:
                    - 10.10.10.1
              Partial Update RD Pool - Full Profile:
                summary: Partially update RD Pool with full profile specification
                description: |
                  Update RD Pool with complete profile information. This matches the documentation
                  example for partial RD Pool updates.
                value:
                  ttl: 86400
                  rdata:
                    - 10.10.10.1
                  profile:
                    '@context': http://schemas.ultradns.com/RDPool.jsonschema
                    order: ROUND_ROBIN
                    description: www
          application/json-patch+json:
            description: |
              JSON PATCH request using RFC 6902 compliant JSON Patch DTOs. Use this for complex partial updates with multiple operations.

              **Features:**
              - Support for add, replace, remove, and move operations
              - Can update specific values within rdata entries using double indexing
              - Can perform multiple operations in a single request
            schema:
              type: array
              items:
                $ref: '#/components/schemas/JSONPatch'
            examples:
              Update MX Records with JSON Patch:
                summary: Update specific values within MX records using double indexing
                value:
                  - op: replace
                    path: /rdata/0/1
                    value: new.mail.server.biz.
                  - op: replace
                    path: /rdata/1
                    value: 30 new3.mail.server.biz.
              Add and Remove Records with JSON Patch:
                summary: Add new records and remove existing ones
                value:
                  - op: add
                    path: /rdata/2
                    value: 40 mail4.example.com.
                  - op: remove
                    path: /rdata/0
              Update TTL with JSON Patch:
                summary: Update only the TTL value
                value:
                  - op: replace
                    path: /ttl
                    value: 7200
              Update RD Pool Order with JSON Patch:
                summary: Update RD Pool ordering method using JSON Patch
                description: |
                  Change the ordering method of an RD Pool from one type to another
                  while preserving other profile settings.
                value:
                  - op: replace
                    path: /profile/order
                    value: FIXED
              Add Record to RD Pool with JSON Patch:
                summary: Add a new IP address to an existing RD Pool
                description: |
                  Add a new record to an RD Pool without modifying existing records.
                  This demonstrates the PATCH capability for adding records to pools.
                value:
                  - op: add
                    path: /rdata/-
                    value: 10.10.10.1
              Remove Record from RD Pool with JSON Patch:
                summary: Remove a specific record from an RD Pool by index
                description: |
                  Remove a record from an RD Pool using its array index position.
                  You need to know the position of the rdata entry you want to remove.

                  **Important Note:** This is the only way to remove individual records from an RD Pool.
                  The index is 0-based, so `/rdata/0` removes the first record, `/rdata/1` removes the second, etc.
                value:
                  - op: remove
                    path: /rdata/0
              Remove Multiple Records from RD Pool:
                summary: Remove multiple records from an RD Pool in a single operation
                description: |
                  Remove multiple records from an RD Pool by specifying their index positions.

                  **Important:** When removing multiple records, remove them in reverse order (highest index first)
                  to avoid index shifting issues. Alternatively, remove them all in one operation as shown.
                value:
                  - op: remove
                    path: /rdata/2
                  - op: remove
                    path: /rdata/0
              Update RD Pool Profile with JSON Patch:
                summary: Update multiple RD Pool profile fields using JSON Patch
                description: |
                  Update both the ordering method and description of an RD Pool
                  in a single JSON Patch operation.
                value:
                  - op: replace
                    path: /profile/order
                    value: RANDOM
                  - op: replace
                    path: /profile/description
                    value: Updated to random distribution for better load balancing
      responses:
        '200':
          description: RRSet partially updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: RRSet partially updated successfully
              examples:
                Success Response:
                  value:
                    message: RRSet partially updated successfully
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
    delete:
      tags:
        - Records
      summary: Delete All RRSets for an Owner and Type
      description: |
        This call allows you to delete all resource records of a particular type (an RRSet) for a specified domain owner.

        **Important Note:**
        The Delete All RRSets call does not allow for the use of ANY as the {type} entry.
      operationId: deleteAllRrsetsForOwnerAndType
      parameters:
        - $ref: '#/components/parameters/ZoneName'
        - $ref: '#/components/parameters/RecordType'
        - $ref: '#/components/parameters/OwnerName'
      responses:
        '202':
          $ref: '#/components/responses/AcceptedGeneric'
        '204':
          description: RRSets deleted successfully
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
        5XX:
          $ref: '#/components/responses/Error5xx'
  /accounts/{accountName}/settings/{settingName}:
    post:
      tags:
        - Account Settings
      summary: Create Account Setting
      description: |
        Create or configure an account level setting. The setting name can be one of the supported account settings parameters.

        **Request Body by Setting Type:**
        - **ZONE_TRANSFER_NOTIFICATION, USAGE_NOTIFICATION**: Use NotificationSetting DTO (includes threshold and emailNotification)
        - **SERVICE_NOTIFICATION, sslCertPreferences**: Use EmailNotification DTO (emails array only)
        - **ZONE_USAGE_NOTIFICATION**: Use ZoneUsageNotification DTO (includes zone, threshold, and emailNotification)
        - **PUSH_NOTIFICATIONS**: Use RealtimePushNotification DTO (webhooks array with enable, url, and include properties)
        - **SECURITY_PREFERENCES**: Use SecurityPreferences DTO (security-related boolean and numeric settings)

        **Important Notes:**
        - Since this is a POST function, all account settings and all the fields in the DTOs must be specified, otherwise validation errors will occur.
        - For the SERVICE_NOTIFICATION setting, only one email address is permitted as part of the request payload.
        - For the USAGE_NOTIFICATION setting, a maximum of five email addresses can be configured as part of the request payload.
        - Service Notifications are not applicable for Parent Sub Accounts or Sub Accounts in the Multi-Level Account Management hierarchy.
      operationId: createAccountSetting
      parameters:
        - $ref: '#/components/parameters/AccountName'
        - $ref: '#/components/parameters/SettingName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Request body structure varies based on the settingName parameter. See operation description for details on which DTO to use for each setting type.
              additionalProperties: true
            examples:
              Service Notification Setting:
                summary: Create Service Notification setting (only one email allowed)
                value:
                  emailNotification:
                    emails:
                      - test@test.com
              Usage Notification Setting:
                summary: Create Usage Notification setting (up to five emails allowed)
                value:
                  threshold: 200
                  emailNotification:
                    enable: true
                    emails:
                      - test@test.com
              Zone Transfer Notification Setting:
                summary: Create Zone Transfer Notification setting
                value:
                  threshold: 200
                  emailNotification:
                    enable: true
                    emails:
                      - test@test.com
              Zone Usage Notification Setting:
                summary: Create Zone Usage Notification setting
                value:
                  zone: zonetest.com
                  threshold: 25
                  emailNotification:
                    enable: true
                    emails:
                      - user@example.com
                      - user2@example.com
                      - distrolist@example.com
              Push Notifications Setting:
                summary: Create Push Notifications setting
                value:
                  webhooks:
                    - enable: true
                      url: https://example.com/webhookOne
                      include:
                        ALL_CHANGES: true
                    - enable: true
                      url: https://example.com/webhookTwo
                      include:
                        RECORD_CHANGES: true
                        DOMAIN_CHANGES: true
                    - enable: true
                      url: https://example.com/webhookThree
                      include:
                        AUTHENTICATION_EVENTS: true
              Security Preferences Setting:
                summary: Create Security Preferences setting
                value:
                  enforceStrongPasswords: true
                  requireTwoFactorAuth: false
                  sessionTimeout: 60
              SSL Certificate Preferences Setting:
                summary: Create SSL Certificate Preferences setting (email notifications for certificate expiration)
                value:
                  enable: true
                  emails:
                    - ssl-admin@example.com
                    - security@example.com
      responses:
        '201':
          $ref: '#/components/responses/CreatedGeneric'
          description: Account setting created successfully
        '400':
          $ref: '#/components/responses/Error400'
          description: |
            Bad Request - Invalid data was submitted in the body around any validation error, or invalid email address/count provided
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
          description: |
            Forbidden - You do not have permission to configure account settings for the specified account, or you are not the Owner or Administrative user for the specified account
        '409':
          description: Conflict - Given setting name already exists in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
        5XX:
          $ref: '#/components/responses/Error5xx'
    put:
      tags:
        - Account Settings
      summary: Update Account Setting
      description: |
        Update (full replacement) of an existing account level setting. The setting name can be one of the supported account settings parameters.

        **Request Body by Setting Type:**
        - **ZONE_TRANSFER_NOTIFICATION, USAGE_NOTIFICATION**: Use NotificationSetting DTO (includes threshold and emailNotification)
        - **SERVICE_NOTIFICATION, sslCertPreferences**: Use EmailNotification DTO (emails array only)
        - **ZONE_USAGE_NOTIFICATION**: Use ZoneUsageNotification DTO (includes zone, threshold, and emailNotification)
        - **PUSH_NOTIFICATIONS**: Use RealtimePushNotification DTO (webhooks array with enable, url, and include properties)
        - **SECURITY_PREFERENCES**: Use SecurityPreferences DTO (security-related boolean and numeric settings)

        **Important Notes:**
        - This is a full replacement operation - all fields in the DTO must be specified.
        - For the SERVICE_NOTIFICATION setting, only one email address is permitted as part of the request payload.
        - For the USAGE_NOTIFICATION setting, a maximum of five email addresses can be configured as part of the request payload.
        - Service Notifications are not applicable for Parent Sub Accounts or Sub Accounts in the Multi-Level Account Management hierarchy.
      operationId: updateAccountSetting
      parameters:
        - $ref: '#/components/parameters/AccountName'
        - $ref: '#/components/parameters/SettingName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Request body structure varies based on the settingName parameter. See operation description for details on which DTO to use for each setting type.
              additionalProperties: true
            examples:
              Service Notification Setting:
                summary: Update Service Notification setting (only one email allowed)
                value:
                  emailNotification:
                    emails:
                      - updated-test@test.com
              Usage Notification Setting:
                summary: Update Usage Notification setting (up to five emails allowed)
                value:
                  threshold: 150
                  emailNotification:
                    enable: true
                    emails:
                      - updated-test@test.com
              Zone Transfer Notification Setting:
                summary: Update Zone Transfer Notification setting
                value:
                  threshold: 100
                  emailNotification:
                    enable: false
                    emails:
                      - updated-admin@example.com
              Zone Usage Notification Setting:
                summary: Update Zone Usage Notification setting
                value:
                  zone: updated-zone.com
                  threshold: 50
                  emailNotification:
                    enable: true
                    emails:
                      - updated-monitoring@example.com
                      - updated-alerts@example.com
              Push Notifications Setting:
                summary: Update Push Notifications setting
                value:
                  webhooks:
                    - enable: false
                      url: https://example.com/updated-webhook
                      include:
                        RECORD_CHANGES: true
                        ZONE_EVENTS: true
              Security Preferences Setting:
                summary: Update Security Preferences setting
                value:
                  enforceStrongPasswords: false
                  requireTwoFactorAuth: true
                  sessionTimeout: 120
              SSL Certificate Preferences Setting:
                summary: Update SSL Certificate Preferences setting (email notifications for certificate expiration)
                value:
                  enable: false
                  emails:
                    - updated-ssl-admin@example.com
      responses:
        '200':
          description: Account setting updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account setting updated successfully
        '400':
          $ref: '#/components/responses/Error400'
          description: |
            Bad Request - Invalid data was submitted in the body around any validation error, or invalid email address/count provided
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
          description: |
            Forbidden - You do not have permission to configure account settings for the specified account, or you are not the Owner or Administrative user for the specified account
        '404':
          $ref: '#/components/responses/Error404'
          description: Account setting not found
        5XX:
          $ref: '#/components/responses/Error5xx'
    get:
      tags:
        - Account Settings
      summary: Get Account Setting
      description: |
        Retrieve the configuration for a specific account level setting. The response structure varies based on the setting type.

        **Response Body by Setting Type:**
        - **ZONE_TRANSFER_NOTIFICATION, USAGE_NOTIFICATION**: Returns NotificationSetting DTO (includes threshold and emailNotification)
        - **SERVICE_NOTIFICATION, sslCertPreferences**: Returns EmailNotification DTO (emails array only)
        - **ZONE_USAGE_NOTIFICATION**: Returns ZoneUsageNotification DTO (includes zone, threshold, and emailNotification)
        - **PUSH_NOTIFICATIONS**: Returns RealtimePushNotification DTO (webhooks array with enable, url, and include properties)
        - **SECURITY_PREFERENCES**: Returns SecurityPreferences DTO (security-related boolean and numeric settings)
      operationId: getAccountSetting
      parameters:
        - $ref: '#/components/parameters/AccountName'
        - $ref: '#/components/parameters/SettingName'
      responses:
        '200':
          description: Account setting retrieved successfully
          content:
            application/json:
              schema:
                type: object
                description: Response structure varies based on the settingName parameter. See operation description for details on which DTO is returned for each setting type.
                additionalProperties: true
              examples:
                Service Notification Setting:
                  summary: Service Notification setting response
                  value:
                    emailNotification:
                      emails:
                        - service-alerts@test.com
                Usage Notification Setting:
                  summary: Usage Notification setting response
                  value:
                    threshold: 75
                    emailNotification:
                      enable: true
                      emails:
                        - usage-alerts@test.com
                        - admin@test.com
                Zone Transfer Notification Setting:
                  summary: Zone Transfer Notification setting response
                  value:
                    threshold: 100
                    emailNotification:
                      enable: true
                      emails:
                        - zone-transfer@test.com
                Zone Usage Notification Setting:
                  summary: Zone Usage Notification setting response
                  value:
                    zone: example.com
                    threshold: 50
                    emailNotification:
                      enable: true
                      emails:
                        - zone-monitoring@example.com
                        - alerts@example.com
                Push Notifications Setting:
                  summary: Push Notifications setting response
                  value:
                    webhooks:
                      - enable: true
                        url: https://example.com/webhook
                        include:
                          ALL_CHANGES: true
                      - enable: false
                        url: https://backup.example.com/webhook
                        include:
                          RECORD_CHANGES: true
                          DOMAIN_CHANGES: true
                Security Preferences Setting:
                  summary: Security Preferences setting response
                  value:
                    enforceStrongPasswords: true
                    requireTwoFactorAuth: false
                    sessionTimeout: 60
                SSL Certificate Preferences Setting:
                  summary: SSL Certificate Preferences setting response
                  value:
                    enable: true
                    emails:
                      - ssl-admin@example.com
                      - security-team@example.com
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
          description: |
            Forbidden - You do not have permission to view account settings for the specified account
        '404':
          $ref: '#/components/responses/Error404'
          description: Account setting not found or not configured
        5XX:
          $ref: '#/components/responses/Error5xx'
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        password:
          tokenUrl: https://api.ultradns.com/authorization/token
          scopes: {}
  schemas:
    QueryInfo:
      type: object
      properties:
        q:
          type: string
          description: The query used to construct the list
          example: zone_status:ALL+network:ultra2
        limit:
          type: integer
          minimum: 1
          maximum: 1000
          default: 100
          description: The maximum number of rows requested. Default is 100, maximum is 1,000
          example: 50
        reverse:
          type: boolean
          description: Whether the list is ascending (false) or descending (true)
          example: false
        sort:
          type: string
          description: The sort column used to order the list
          example: name
      required:
        - limit
        - reverse
        - sort
    CursorInfo:
      type: object
      description: Cursor information for pagination with next, previous, first and last values
      properties:
        next:
          type: string
          description: Cursor for the next page of results
          example: c3ViLnVsdHJhZG5zMnRlc3QuY29tLjpORVhU
        previous:
          type: string
          description: Cursor for the previous page of results
        first:
          type: string
          description: Cursor for the first page of results
        last:
          type: string
          description: Cursor for the last page of results
          example: fjpMQVNU
    ResultInfo:
      type: object
      properties:
        totalCount:
          type: integer
          minimum: 0
          description: Total number of items available
        offset:
          type: integer
          minimum: 0
          description: Zero-based offset for pagination
        returnedCount:
          type: integer
          minimum: 0
          description: Number of items returned in this response
      required:
        - totalCount
        - offset
        - returnedCount
    Zone:
      type: object
      description: The Zone DTO is the data structure returned for the Zone DTOs call
      properties:
        properties:
          $ref: '#/components/schemas/ZoneProperties'
        restrictIpList:
          type: array
          description: The list of IP ranges that are allowed to use AXFR to transfer primary zones out. Only present if this is a primary zone.
          items:
            $ref: '#/components/schemas/RestrictIP'
          example:
            - cidr: 192.168.1.0/24
              comment: Office network range
            - singleIP: 10.0.0.100
              comment: Backup server
        primaryNameServers:
          $ref: '#/components/schemas/NameServerIPList'
          description: The primary name servers that are the source of a secondary zone. Only present if this is a secondary zone.
        originalZoneName:
          type: string
          description: The name of the zone that is the source of an alias zone. Only present if this is an alias zone.
          example: originalzone.com.
        registrarInfo:
          $ref: '#/components/schemas/RegistrarInfo'
          description: Information about the name server configuration for this zone. Only present if this is a primary zone.
        tsig:
          $ref: '#/components/schemas/TSIG'
          description: The TSIG information for the primary zone. Only present if this is a primary zone.
        notifyAddresses:
          type: array
          description: The addresses that are notified when updates are made to the primary zone. Only present if this is a primary zone.
          items:
            $ref: '#/components/schemas/NotifyAddress'
          example:
            - notifyAddress: 192.168.1.100
              description: Primary DNS server
            - notifyAddress: 192.168.1.101
              description: Backup DNS server
        transferStatusDetails:
          $ref: '#/components/schemas/TransferStatusDetails'
          description: The zone transfer status details
    ZoneCreate:
      type: object
      description: The Zone Create DTO is the data structure required for creating a zone in UltraDNS
      properties:
        properties:
          $ref: '#/components/schemas/ZoneProperties'
          description: The Zone Properties DTO is required for all zone types.
        primaryCreateInfo:
          $ref: '#/components/schemas/PrimaryZone'
          description: Primary Zone settings. Required when creating a PRIMARY zone.
        secondaryCreateInfo:
          $ref: '#/components/schemas/SecondaryZone'
          description: Secondary Zone settings. Required when creating a SECONDARY zone.
        aliasCreateInfo:
          $ref: '#/components/schemas/AliasZone'
          description: Alias Zone settings. Required when creating an ALIAS zone.
        changeComment:
          type: string
          description: A comment describing the zone creation operation.
          example: Create an alias zone
      required:
        - properties
    PrimaryZone:
      type: object
      description: The Primary Zone DTO contains the metadata used to create or update a Primary Zone
      properties:
        forceImport:
          type: boolean
          description: Whether or not to move existing records from zones into this new zone. true = move, false = leave in existing zone (default). Only used for primary zone creation. If not present, defaults to "false". Ignored if present for update.
          example: false
        createType:
          type: string
          description: Indicates the method for creating the primary zone.
          enum:
            - NEW
            - COPY
            - TRANSFER
            - UPLOAD
          example: NEW
        nameServer:
          type: object
          description: Name server configuration for zone transfer. Required if createType is "TRANSFER".
          properties:
            ip:
              type: string
              description: IP address of the primary zone's name server (where the primary zone is being transferred from). Required if createType is "TRANSFER".
              format: ipv4
              example: 192.168.1.10
            tsigKey:
              type: string
              description: If TSIG is enabled for this name server, the name of the TSIG key. Used only if createType is "TRANSFER". Required if TSIG is enabled for this name server.
              example: transfer-tsig-key
            tsigKeyValue:
              type: string
              description: If TSIG is enabled for this name server, the TSIG key's value. Used only if createType is "TRANSFER". Required if TSIG is enabled for this name server.
              example: base64-encoded-tsig-secret
            tsigAlgorithm:
              type: string
              description: The hash algorithm used to generate the TSIG key. Used only if createType is "TRANSFER". Default is hmac-md5. Required if TSIG is enabled for this name server.
              enum:
                - hmac-md5
                - hmac-sha1
                - hmac-sha224
                - hmac-sha256
                - hmac-sha384
                - hmac-sha512
              default: hmac-md5
              example: hmac-sha256
        originalZoneName:
          type: string
          description: The name of the zone being copied. The existing zone must be owned by the same account as the new zone. Required if createType is "COPY".
          example: originalzone.com.
        restrictIpList:
          type: array
          description: The list of IP ranges that are allowed to transfer primary zones out using zone transfer protocol (AXFR/IXFR).
          items:
            $ref: '#/components/schemas/RestrictIP'
          example:
            - cidr: 192.168.1.0/24
              comment: Office network range
            - singleIP: 10.0.0.100
              comment: Backup server
        tsig:
          $ref: '#/components/schemas/TSIG'
          description: The TSIG information for the primary zone.
        notifyAddresses:
          type: array
          description: The addresses that are notified when updates are made to the primary zone.
          items:
            $ref: '#/components/schemas/NotifyAddress'
          example:
            - notifyAddress: 192.168.1.100
              description: Primary DNS server
            - notifyAddress: 192.168.1.101
              description: Backup DNS server
        inherit:
          type: string
          description: Defines whether this zone should inherit the zone transfer values from the Account, and also specifies which values to inherit. Defaults to "ALL" if zone transfer settings on the account have been set.
          example: ALL
    SecondaryZone:
      type: object
      description: The Secondary Zone Create DTO holds the metadata used to create or update a Secondary Zone
      properties:
        primaryNameServers:
          $ref: '#/components/schemas/NameServerIPList'
          description: The primary name servers of the source zone for the secondary zone. Required for creating or updating a secondary zone. Ignored in all other cases.
        notificationEmailAddress:
          type: string
          description: The Notification Email for a secondary zone.
          example: admin@example.com
        allowUnresponsiveNS:
          type: boolean
          description: When enabled, allows for an IP Address that may be offline or unresponsive to be configured. true = enabled
          example: false
    AliasZone:
      type: object
      description: The Alias Zone DTO holds the metadata used for creating an Alias Zone
      properties:
        originalZoneName:
          type: string
          description: The name of the zone being aliased. The existing zone must be owned by the same account as the new zone. Required for alias during creation.
          example: originalzone.com.
    ZonesList:
      type: object
      properties:
        queryInfo:
          $ref: '#/components/schemas/QueryInfo'
        cursorInfo:
          $ref: '#/components/schemas/CursorInfo'
        zones:
          type: array
          items:
            $ref: '#/components/schemas/Zone'
          description: List of the returned zones. Each item in the list matches the zone DTO described above.
      required:
        - zones
    RRSet:
      type: object
      description: |
        The RRSet DTO is the basic unit for resource record manipulation in the REST API. An RRSet contains the data for all resource records present at the same owner name (label), and with the same type and class (all records in UltraDNS have IN class).

        The UltraDNS REST API enforces the same TTL for all records in an RRSet (with the exception of a directional pool).

        Rather than trying to specify a custom structure for each different resource record type, the data for all resource records is represented by an "rdata" field. This field's contents map to the data supplied in the BIND presentation format for a resource record.

        If an RRSet is associated with an UltraDNS pool, the "profile" field is present and contains pool specific attributes.

        The RRSet DTO is used in the List (GET), Create (POST), and Update (PATCH) RRSets API calls. When a user is submitting an RRSet DTO to the server, the owner name and rrtype are not required, because they are specified by the URI. If present, they will be ignored.
      properties:
        ownerName:
          type: string
          description: |
            The domain name of the owner of the RRSet. Can be either:
            - Fully Qualified Domain Name (FQDN)
            - Relative Domain Name

            If a FQDN, it must be contained within the zone name FQDN.

            NO for PUT, POST, or PATCH calls. Ignored if present.
            Not present (and ignored if present) if this RRSet is embedded inside of an Owner structure.
          example: a.domain.name.
        rrtype:
          type: string
          description: |
            Resource Record Type for the RRSet.

            Must be formatted as the well-known resource record type (A, AAAA, TXT, etc.) and the corresponding number for the type, between 1 and 65535 or a known resource record name (A, AAAA, SRV, etc.).

            NO for PUT, POST, or PATCH calls. Ignored if present.
            Not present (and ignored if present) if this RRSet is embedded inside of an Owner structure.
          example: A (1)
        ttl:
          type: integer
          minimum: 0
          maximum: 2147483647
          description: |
            The time to live (in seconds) for all records in the RRSet.

            Must be a value between 0 and 2147483647, inclusive.

            Should be included in PUT, POST or PATCH calls.
            If TTL is not specified, the value set at the account level (either for record type or global setting) will be used.
          example: 300
        rdata:
          type: array
          items:
            type: string
          description: |
            The data for the records in the RRSet.

            Must use the BIND presentation format for the specified rrtype.

            For MX, NS, CNAME, PTR, and APEXALIAS record types, the rdata value cannot be relative to the zone name. It must be a FQDN.

            If rrtype is MX, entering "0 ." will create a NULL MX record, implying that "No Service" is available for the server / record.

            REQUIRED for PUT, POST, or PATCH calls. Must include BIND formatted data.

            Multiple non-Null MX records with the same domain/host label are supported.
            Only 1 Null-MX record is supported per domain/host.
            A domain/host cannot contain both Null and Non-Null MX records.
          example:
            - 1.2.3.4
        systemGenerated:
          type: array
          items:
            type: boolean
          description: |
            Indicates whether the record in an rdata list is system generated or not.

            It represents the Boolean value that corresponds to the record in the list (in same order the records are returned).

            Will be returned for GET requests when used as the query parameter systemGeneratedStatus.
            If the query parameter is set to true, then the attribute name will be returned in the response.
            Ignored for PUT/PATCH/POST requests.
          example:
            - false
        ultra2SystemGenerated:
          type: array
          items:
            type: boolean
          description: |
            Indicates whether the nameserver in an rdata list is generated by the Ultra2 system or not.

            ultra2SystemGenerated will only be returned for those accounts which have Ultra2 enabled, as well as the associated NS records.
          example:
            - true
            - true
            - false
            - false
        profile:
          $ref: '#/components/schemas/RRSetProfile'
      examples:
        a_record:
          summary: A Record Example
          description: Example of an A record RRSet
          value:
            ownerName: a.domain.name.
            rrtype: A (1)
            ttl: 300
            rdata:
              - 1.2.3.4
        null_mx_record:
          summary: NULL MX Record Example
          description: Example of a NULL MX record RRSet
          value:
            ownerName: a.domain.name.
            rrtype: MX (15)
            ttl: 300
            rdata:
              - 0 .
        a_record_with_system_generated:
          summary: A Record with System Generated Status
          description: Example of an A record RRSet with systemGenerated field
          value:
            ownerName: a.domain.name.
            rrtype: A (1)
            ttl: 300
            rdata:
              - 1.2.3.4
            systemGenerated:
              - false
        ns_record_ultra2:
          summary: NS Record with Ultra2 System Generated
          description: Example of an NS record RRSet with Ultra2 system generated nameservers
          value:
            ownerName: abc.com.
            rrtype: NS (2)
            ttl: 86400
            rdata:
              - ns1.hostingsvcs.com.
              - ns2.hostingsvcs.com.
              - udns1.ultradns.net.
              - udns2.ultradns.net.
            systemGenerated:
              - true
              - true
              - true
              - true
            ultra2SystemGenerated:
              - true
              - true
              - false
              - false
        rd_pool_a_record:
          summary: A Record with RD Pool Profile
          description: Example of an A record RRSet with Resource Distribution Pool profile
          value:
            ownerName: redredrobin.andria.com.
            rrtype: A (1)
            ttl: 86400
            rdata:
              - 198.16.1.22
              - 192.168.2.56
            profile:
              '@context': http://schemas.ultradns.com/RDPool.jsonschema
              order: ROUND_ROBIN
              description: T. migratorius
        rd_pool_aaaa_record:
          summary: AAAA Record with RD Pool Profile
          description: Example of an AAAA record RRSet with Resource Distribution Pool profile using random ordering
          value:
            ownerName: ipv6.example.com.
            rrtype: AAAA (28)
            ttl: 300
            rdata:
              - 2001:db8::1
              - 2001:db8::2
              - 2001:db8::3
            profile:
              '@context': http://schemas.ultradns.com/RDPool.jsonschema
              order: RANDOM
              description: IPv6 load balancing pool
    RRSetsList:
      type: object
      description: |
        This is returned when retrieving multiple RRSets from the server. It is not used for creating or updating RRSets.
      properties:
        zoneName:
          type: string
          description: The FQDN for the zone
          example: abc.com.
        rrSets:
          type: array
          items:
            $ref: '#/components/schemas/RRSet'
          description: The list of Resource Record Set (RRSet) DTO
        queryInfo:
          $ref: '#/components/schemas/QueryInfo'
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
      required:
        - zoneName
        - rrSets
        - queryInfo
        - resultInfo
      examples:
        ultra2_response:
          summary: Ultra2 Enabled Account Response
          description: Response results for Ultra2 enabled account with NS records
          value:
            zoneName: abc.com.
            rrSets:
              - ownerName: abc.com.
                rrtype: NS (2)
                ttl: 86400
                rdata:
                  - ns1.hostingsvcs.com.
                  - ns2.hostingsvcs.com.
                  - udns1.ultradns.net.
                  - udns2.ultradns.net.
                systemGenerated:
                  - true
                  - true
                  - true
                  - true
                ultra2SystemGenerated:
                  - true
                  - true
                  - false
                  - false
            queryInfo:
              q: kind:ALL
              sort: OWNER
              reverse: false
              limit: 50
            resultInfo:
              totalCount: 1
              offset: 0
              returnedCount: 1
        rd_pool_response:
          summary: RD Pool Records Response
          description: Response showing RD Pool records with Resource Distribution profile
          value:
            zoneName: andria.com.
            rrSets:
              - ownerName: redredrobin.andria.com.
                rrtype: A (1)
                ttl: 86400
                rdata:
                  - 198.16.1.22
                  - 192.168.2.56
                profile:
                  '@context': http://schemas.ultradns.com/RDPool.jsonschema
                  order: ROUND_ROBIN
                  description: T. migratorius
            queryInfo:
              q: kind:POOLS
              sort: OWNER
              reverse: false
              limit: 100
            resultInfo:
              totalCount: 1
              offset: 0
              returnedCount: 1
    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: OAuth 2.0 access token (camelCase variant)
        access_token:
          type: string
          description: OAuth 2.0 access token (snake_case variant)
        expiresIn:
          type: string
          description: Token expiration time in seconds (camelCase variant)
        expires_in:
          type: string
          description: Token expiration time in seconds (snake_case variant)
        refreshToken:
          type: string
          description: OAuth 2.0 refresh token (camelCase variant)
        refresh_token:
          type: string
          description: OAuth 2.0 refresh token (snake_case variant)
        refreshTokenExpiresIn:
          type: string
          description: Refresh token expiration time in seconds (camelCase variant)
        refresh_token_expires_in:
          type: string
          description: Refresh token expiration time in seconds (snake_case variant)
        tokenType:
          type: string
          example: Bearer
          description: Token type (camelCase variant)
        token_type:
          type: string
          example: Bearer
          description: Token type (snake_case variant)
        username:
          type: string
          description: Username associated with the token
    ErrorGeneric:
      type: object
      required:
        - errorCode
        - errorMessage
      properties:
        errorCode:
          type: integer
          description: Numeric error code
        errorMessage:
          type: string
          description: Human-readable error message
        error:
          type: string
          description: OAuth2 error type
        error_description:
          type: string
          description: Detailed error description with error code
    Task:
      type: object
      description: The Task DTO is used to describe the current state of a task.
      properties:
        taskId:
          type: string
          format: uuid
          description: Id for the task.
          example: 0b40c7dd-748d-4c49-8506-26f0c7d2ea9c
        code:
          type: string
          enum:
            - PENDING
            - IN_PROCESS
            - COMPLETE
            - ERROR
          description: Current state of the task.
          example: COMPLETE
        message:
          type: string
          description: Current message for the task.
          example: Processing complete
        resultUri:
          type: string
          format: uri-reference
          description: If task is COMPLETE, the URI from where the resulting data can be downloaded.
          example: /tasks/0b40c7dd-748d-4c49-8506-26f0c7d2ea9c/result
      required:
        - taskId
        - code
        - message
    TaskList:
      type: object
      description: The TaskList DTO is returned when requesting the state of all tasks for a user.
      properties:
        tasks:
          type: array
          description: The list of returned tasks. Each entry in the list matches the task DTO described above.
          items:
            $ref: '#/components/schemas/Task'
          example:
            - taskId: 0b40c7dd-748d-4c49-8506-26f0c7d2ea9c
              code: COMPLETE
              message: Processing complete
              resultUri: /tasks/0b40c7dd-748d-4c49-8506-26f0c7d2ea9c/result
        queryInfo:
          $ref: '#/components/schemas/QueryInfo'
          description: The query used to construct the list.
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
          description: Information about the result set.
      required:
        - tasks
        - queryInfo
        - resultInfo
    ReportTask:
      type: object
      description: The Reporter Task DTO is used to describe the current state of a task.
      properties:
        taskId:
          type: string
          description: Id for the task.
          example: ZQV-013d3c5c-7b14-4ff0-b4af-453b76a827b6
        code:
          type: string
          enum:
            - PENDING
            - IN_PROCESS
            - COMPLETE
            - ERROR
          description: Current state of the task.
          example: COMPLETE
        message:
          type: string
          description: Current message for the task.
          example: Completed ZQV Report Successfully.
        lastModifiedDateTime:
          type: string
          format: date-time
          description: Last Modified date time of the task.
          example: '2016-08-26T12:33:22.000Z'
        resultUri:
          type: string
          format: uri-reference
          description: If task is COMPLETE, the URI from where the resulting data can be downloaded.
          example: https://api.ultradns.com/reports/tasks/ZQV-013d3c5c-7b14-4ff0-b4af-453b76a827b6
      required:
        - taskId
        - code
        - message
        - lastModifiedDateTime
    ReportTaskList:
      type: object
      description: The Reporter TaskList DTO is returned when requesting the state of all tasks for a user.
      properties:
        tasks:
          type: array
          description: The list of returned tasks. Each entry in the list matches the task DTO described above.
          items:
            $ref: '#/components/schemas/ReportTask'
          example:
            - taskId: ZQV-013d3c5c-7b14-4ff0-b4af-453b76a827b6
              code: COMPLETE
              message: Completed ZQV Report Successfully.
              lastModifiedDateTime: '2016-08-26T12:33:22.000Z'
              resultUri: https://api.ultradns.com/reports/tasks/ZQV-013d3c5c-7b14-4ff0-b4af-453b76a827b6
            - taskId: PQV-003f098b-a2df-437e-8482-65e8d93b4858
              code: COMPLETE
              message: Completed PQVReport Successfully.
              lastModifiedDateTime: '2016-08-26T12:33:22.000Z'
              resultUri: https://api.ultradns.com/reports/tasks/PQV-003f098b-a2df-437e-8482-65e8d93b4858
      required:
        - tasks
    ZoneDelete:
      type: object
      description: Optional request body for zone deletion
      properties:
        changeComment:
          type: string
          description: Comment describing the reason for the zone deletion
          example: Deleting Zone as agreed
    ZoneSnapshotEligible:
      type: object
      description: The ZoneSnapshotEligible DTO details the snapshot status/eligibility of a zone
      properties:
        zoneName:
          type: string
          description: The Zone name
          example: abc.com.
        snapshots:
          type: array
          description: The stored Snapshot information (if available)
          items:
            type: object
            properties:
              date:
                type: string
                format: date-time
                description: The date and time of the latest available Snapshot (in ISO 8601 format)
                example: '2018-09-24T14:59:18.208Z'
              description:
                type: string
                description: The description for the Zone Snapshot
                example: Description for snapshot purpose
            required:
              - date
              - description
      required:
        - zoneName
        - snapshots
    ZoneSnapshotEligibleList:
      type: object
      description: The ZoneSnapshotEligibleList DTO contains a list of zone snapshot eligibility information with query and result metadata
      properties:
        queryInfo:
          $ref: '#/components/schemas/QueryInfo'
          description: Information about the query used to construct the list
        resultInfo:
          $ref: '#/components/schemas/ResultInfo'
          description: Information about the results returned
        zones:
          type: array
          description: The list of the zone objects, which includes the domain name and possible Snapshot date
          items:
            $ref: '#/components/schemas/ZoneSnapshotEligible'
          example:
            - zoneName: abc.com.
              snapshots:
                - date: '2018-09-24T14:59:18.208Z'
                  description: Description for snapshot purpose
            - zoneName: abc1.com.
              snapshots:
                - date: '2018-12-03T10:59:38.208Z'
                  description: Description for snapshot purpose
      required:
        - zones
        - queryInfo
        - resultInfo
    ZoneSnapshot:
      type: object
      description: The ZoneSnapshot DTO contains a complete snapshot of a zone including all resource records and web forwards
      properties:
        zoneName:
          type: string
          description: The name of the zone for which this snapshot was taken
          example: 00-ben-doc-test.com
        rrSets:
          type: array
          description: Array of resource record sets (RRSets) in the zone
          items:
            $ref: '#/components/schemas/RRSet'
          example:
            - ownerName: def.00-ben-doc-test.com.
              rrtype: A (1)
              ttl: 300
              rdata:
                - 204.74.99.100
            - ownerName: 00-ben-doc-test.com.
              rrtype: NS (2)
              ttl: 500
              rdata:
                - udns1.ultradns.net.
                - udns2.ultradns.net.
            - ownerName: rd.00-ben-doc-test.com.
              rrtype: A (1)
              ttl: 300
              rdata:
                - 3.4.5.6
              profile:
                '@context': http://schemas.ultradns.com/RDPool.jsonschema
                order: ROUND_ROBIN
                description: rd pool
        webForwards:
          type: array
          description: Array of web forward rules in the zone (optional)
          items:
            $ref: '#/components/schemas/WebForward'
          example:
            - guid: 090845B113499BEB
              requestTo: abc.com.00-ben-doc-test.com/requestTo.html
              defaultRedirectTo: http://abc.com/redirectTo.html
              defaultForwardType: HTTP_301_REDIRECT
      required:
        - zoneName
        - rrSets
    WebForward:
      type: object
      description: The WebForward DTO creates, modifies, or retrieves a Web Forward.
      properties:
        guid:
          type: string
          description: |
            System-generated unique identifier for this object.

            Returned for Get Web Forwards call.
            Required for Update and Partial Update of Web Forwards.
          example: 9034F201636B98D9
        requestTo:
          type: string
          description: |
            Specifies the URL to be redirected.

            The anchor character (#) is supported when creating a unique record.
            For example, sub.abc.com/index.html and sub.abc.com/index.html#anchor will be recognized and allowed.

            Required for creation.
            Must be a valid URL.
            Performing an HTTPS redirect requires the use of a valid certificateId.
          example: www.domain.com
        defaultRedirectTo:
          type: string
          description: |
            URL destination of the redirect.

            Required for creation.
            Either http:// or https:// are acceptable.
          example: https://www.example.com
        defaultForwardType:
          type: string
          enum:
            - Framed
            - HTTP_301_REDIRECT
            - HTTP_302_REDIRECT
            - HTTP_303_REDIRECT
            - HTTP_307_REDIRECT
          description: |
            Type of forward. Valid values include:
            - Framed
            - HTTP_301_REDIRECT
            - HTTP_302_REDIRECT
            - HTTP_303_REDIRECT
            - HTTP_307_REDIRECT

            Required for creation.
          example: HTTP_301_REDIRECT
        certificateManagedType:
          type: string
          enum:
            - EE
          description: |
            Indicates that the certificate for the HTTPS Redirect is going to be Encryption Everywhere (EE - managed by UltraDNS).

            Valid value is: EE.
            Required when creating an HTTPS Redirect and not providing your own certificates, and the Managed Certs/Automated Certificate Management feature is enabled.
            Cannot be provided if the certificateId field is present.
          example: EE
        certificateId:
          type: string
          description: |
            The unique certificate identifier, which can be retrieved using the Get the List of Certificates call. Required when creating an HTTPS Redirect.

            Cannot be provided if the certificateManagedType field is present.
            Required for HTTPS Redirect.
          example: cert-12345
        relativeForwardType:
          type: string
          enum:
            - PARAMETER
            - PATH
            - PARAMETER_AND_PATH
          description: |
            The Type of relative forward. Valid values include:
            - PARAMETER – Parameter is appended to the target path.
            - PATH – Path is appended to the target path.
            - PARAMETER_AND_PATH – Both the Path and Parameter are appended to the target path.
          example: PARAMETER
        records:
          type: array
          description: |
            Present if you are using advanced web forward to specify where to forward, based on custom headers.
          items:
            type: object
            properties:
              redirectTo:
                type: string
                description: |
                  URL destination of the redirect.

                  Required on create (if records are present).
                  Must be a valid URL. Can include a port number.
                  Either http:// or https:// are acceptable.
                example: https://www.example.com
              forwardType:
                type: string
                enum:
                  - Framed
                  - HTTP_301_REDIRECT
                  - HTTP_302_REDIRECT
                  - HTTP_303_REDIRECT
                  - HTTP_307_REDIRECT
                description: |
                  Type of forward. Valid values include:
                  - Framed
                  - HTTP_301_REDIRECT
                  - HTTP_302_REDIRECT
                  - HTTP_303_REDIRECT
                  - HTTP_307_REDIRECT

                  Required on create (if records are present).
                example: HTTP_302_REDIRECT
              priority:
                type: integer
                minimum: 1
                description: |
                  Order for a record to match. Lower numbers have higher priority.

                  Positive integer.
                  Required on create (if records are present).
                example: 1
              rules:
                type: array
                description: |
                  Array of one or more rules.

                  Required on create (if records are present).
                items:
                  type: object
                  properties:
                    header:
                      type: string
                      description: |
                        Name of the header to match.

                        Required on create (if records are present).
                        Must be a header returned by the Get Custom HTTP Headers of Account call.
                      example: User-Agent
                    matchCriteria:
                      type: string
                      enum:
                        - BEGINS_WITH
                        - CONTAINS
                        - ENDS_WITH
                        - MATCHES
                      description: |
                        Type of match to perform. Valid values include:
                        - BEGINS_WITH
                        - CONTAINS
                        - ENDS_WITH
                        - MATCHES

                        Required on create (if records are present).
                      example: CONTAINS
                    value:
                      type: string
                      description: |
                        Expected header value.

                        Required on create (if records are present).
                      example: Mobile
                    caseInsensitive:
                      type: boolean
                      default: false
                      description: |
                        Flag to indicate if the match takes case into account (true) or not (false).

                        If not present, defaults to false.
                      example: true
                  required:
                    - header
                    - matchCriteria
                    - value
                required:
                  - redirectTo
                  - forwardType
                  - priority
                  - rules
    JSONPatch:
      type: object
      description: |
        JSON Patch DTO for RFC 6902 compliant partial updates. This allows you to specify multiple types of updates to a single entity in the system using standardized JSON Patch operations.

        JSON Patch calls allow you to specify multiple types of updates to a single entity in the system. For example, you can use a single call to update a NotifyAddress for a zone, add a new address to the list, and remove one you no longer need.

        **Important Notes:**
        - JSON Patch requests must use the PATCH HTTP method
        - Content-Type header must be set to `application/json-patch+json`
        - The request body must contain a JSON array of JSON Patch DTOs
        - Array indices start at 0 (first item is 0, second is 1, etc.)
        - For RRSets with multiple values in rdata entries (MX, NS, SOA), you can index both the record and the value within that record
      properties:
        op:
          type: string
          enum:
            - add
            - replace
            - remove
            - move
          description: |
            Patch operation type you want to perform. Valid values are:
            - **add**: Add a new value to an array or object
            - **replace**: Replace an existing value
            - **remove**: Remove a value from an array or object
            - **move**: Move a value from one position to another (used for pool record ordering)
          example: replace
        path:
          type: string
          description: |
            A JSON pointer that identifies the target (JSON target) on which you want to perform the provided operation. The path should be RFC-6901 compliant.

            **Special Cases for RRSets:**
            - For rdata entries with multiple values (MX, NS, SOA), you can use double indexing
            - Format: `/rdata/{recordIndex}/{valueIndex}` to target specific values within a record
            - Format: `/rdata/{recordIndex}` to target all values in a specific record

            **Examples:**
            - `/rdata/0/1` - Second value of the first record
            - `/rdata/1` - All values of the second record
            - `/restrictIpList/0/endIP` - endIP field of the first restrictIP entry
          example: /rdata/0/1
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: object
            - type: array
          description: |
            The value you want to apply to the JSON target provided. The value is ignored when the op is set to "remove."

            The type of this field depends on what you're updating:
            - String for simple field updates
            - Number for numeric values
            - Boolean for true/false values
            - Object for complex field updates
            - Array for adding multiple items
          example: new.mail.server.biz.
        from:
          type: string
          description: |
            The existing value or path that needs to be changed or moved. This field is used when the "move" operation type is used.

            **Move Operation:**
            - Used to reorder items in arrays (commonly used for pool record ordering)
            - The item at the "from" path is moved to the "path" location
            - Currently valid for Resource Distribution (RD) pools, Simple Load Balancing (SLB) pools, and SiteBacker/Traffic Controller (SB/TC) pools
          example: /rdata/1
      examples:
        replace_operation:
          summary: Replace operation example
          description: Replace the endIP address for the first restrictIP entry
          value:
            op: replace
            path: /restrictIpList/0/endIP
            value: 7.7.7.7
        add_operation:
          summary: Add operation example
          description: Add a new restrictIP entry to the list
          value:
            op: add
            path: /restrictIpList/1
            value:
              startIP: 1.1.1.1
              endIP: 2.2.2.2
        remove_operation:
          summary: Remove operation example
          description: Remove the fourth restrictIP entry from the list
          value:
            op: remove
            path: /restrictIpList/3
        move_operation:
          summary: Move operation example
          description: Move rdata from position 1 to position 2 within a pool
          value:
            op: move
            path: /rdata/2
            from: /rdata/1
        mx_record_update:
          summary: MX record update example
          description: Update specific values within MX records using double indexing
          value:
            op: replace
            path: /rdata/0/1
            value: new.mail.server.biz.
        secondary_zone_update:
          summary: Secondary zone update example
          description: Add a new primary name server IP address
          value:
            op: add
            path: /primaryNameServers/nameServerIpList/nameServerIp1/ip
            value: 2.2.20.8
    AccountSettingsCatalogItem:
      type: object
      description: The AccountSettingsCatalogItem DTO represents an account level setting item in the catalog
      properties:
        displayName:
          type: string
          description: The display name of account level setting. One of the following account level setting as mentioned in Supported Account Settings table
          example: DNS Security Settings
        uri:
          type: string
          description: The uri for performing the operation of account level setting
          example: /accounts/settings/dns-security
      required:
        - displayName
        - uri
    AccountSettingsCatalogItemList:
      type: object
      description: The AccountSettingsCatalogItemList DTO contains a list of account settings catalog items for the account
      properties:
        accountSettingsCatalogItems:
          type: array
          description: The specified account settings for the account
          items:
            $ref: '#/components/schemas/AccountSettingsCatalogItem'
          example:
            - displayName: Zone Transfer Notifications
              uri: /account/{accountName}/settings/ZONE_TRANSFER_NOTIFICATION
            - displayName: DNS Security Settings
              uri: /account/{accountName}/settings/DNS_SECURITY
      required:
        - accountSettingsCatalogItems
    EmailNotification:
      type: object
      description: The EmailNotification DTO represents email notification settings for the account
      properties:
        enable:
          type: boolean
          description: Account setting for enabling/disabling Email pool level notification. The property is not applicable for the SERVICE_NOTIFICATION setting.
          example: true
        emails:
          type: array
          description: The specified account settings for configuring email Ids for receiving Email notification. Max of five email addresses for the USAGE_NOTIFICATION setting.
          items:
            type: string
            format: email
          maxItems: 5
          example:
            - admin@example.com
            - notifications@example.com
            - support@example.com
      required:
        - enable
        - emails
    NotificationSetting:
      type: object
      description: The NotificationSetting DTO represents notification settings configuration for the account
      properties:
        threshold:
          type: integer
          description: The specified threshold value that when met (or exceeded), will trigger system generated emails to be sent to the configured email addresses. This property is not applicable for the SERVICE_NOTIFICATION setting. If specified then it will be ignored.
          example: 1000
          minimum: 0
        emailNotification:
          $ref: '#/components/schemas/EmailNotification'
          description: The specified account settings for email notification
      required:
        - threshold
        - emailNotification
    ZoneUsageNotification:
      type: object
      description: The ZoneUsageNotification DTO represents zone usage notification settings for query volume monitoring
      properties:
        zone:
          type: string
          description: The Zone Name to configure the Query Usage Notification for
          example: zonetest.com
        threshold:
          type: integer
          description: The percentage value that will be used when comparing the last seven-days' worth of queries for the zone. If the query volume exceeds the threshold value, a notification will be sent to the list of configured emails. Valid values are 5, 10, 20, 25, 50, 75, 100.
          enum:
            - 5
            - 10
            - 20
            - 25
            - 50
            - 75
            - 100
          example: 25
        emailNotification:
          $ref: '#/components/schemas/EmailNotification'
          description: The specified account settings for email notification
      required:
        - zone
        - threshold
        - emailNotification
    RealtimePushNotification:
      type: object
      description: The RealtimePushNotification DTO represents push notification settings for real-time webhook notifications
      properties:
        webhooks:
          type: array
          description: Array of webhook configurations for receiving real-time push notifications
          items:
            type: object
            properties:
              enable:
                type: boolean
                description: Determines if the webhook url should be active and receiving real-time push notifications for the configured events, or if it should be disabled
                example: true
              url:
                type: string
                format: uri
                description: The Webhook URL Endpoint
                example: https://example.com/webhookOne
              include:
                type: object
                description: The list of channels and events that you wish to receive notifications for
                properties:
                  ALL_CHANGES:
                    type: boolean
                    description: Receive notifications for all changes
                  DOMAIN_CHANGES:
                    type: boolean
                    description: Receive notifications for domain changes
                  RECORD_CHANGES:
                    type: boolean
                    description: Receive notifications for record changes
                  USER_GROUP_CHANGES:
                    type: boolean
                    description: Receive notifications for user group changes
                  CERTIFICATE_CHANGES:
                    type: boolean
                    description: Receive notifications for certificate changes
                  ALL_EVENTS:
                    type: boolean
                    description: Receive notifications for all events
                  ZONE_EVENTS:
                    type: boolean
                    description: Receive notifications for zone events
                  FAILOVER_EVENT:
                    type: boolean
                    description: Receive notifications for failover events
                  DNSSEC_EVENT:
                    type: boolean
                    description: Receive notifications for DNSSEC events
                  WEBCRS_CERTIFICATE_EVENTS:
                    type: boolean
                    description: Receive notifications for WebCRS certificate events
                  XFR_EVENTS:
                    type: boolean
                    description: Receive notifications for transfer events
                  ZONE_TRANSFER_SUCCESS:
                    type: boolean
                    description: Receive notifications for successful zone transfers
                  ZONE_TRANSFER_FAILURE:
                    type: boolean
                    description: Receive notifications for failed zone transfers
                  AUTHENTICATION_EVENTS:
                    type: boolean
                    description: Receive notifications for authentication events
                  LOGIN_SUCCESS:
                    type: boolean
                    description: Receive notifications for successful logins
                  LOGIN_FAILURE:
                    type: boolean
                    description: Receive notifications for failed logins
                additionalProperties: false
            required:
              - enable
              - url
              - include
      required:
        - webhooks
    SecurityPreferences:
      type: object
      description: The SecurityPreferences DTO represents security preferences configuration at the account level
      properties:
        enforceStrongPasswords:
          type: boolean
          description: Enforce strong password requirements for account users
          example: true
        requireTwoFactorAuth:
          type: boolean
          description: Require two-factor authentication for account users
          example: false
        sessionTimeout:
          type: integer
          description: Session timeout in minutes
          example: 30
          minimum: 5
          maximum: 1440
      required:
        - enforceStrongPasswords
        - requireTwoFactorAuth
    ZoneProperties:
      type: object
      description: The Zone Properties DTO holds the common metadata across all types of zones
      properties:
        name:
          type: string
          description: Name of the zone, with trailing periods (....). Must be a valid domain name. Required for zone creation. Ignored if present on update.
          example: 0-0-0-0-0sample.com.
        accountName:
          type: string
          description: Name of the account. Required for zone creation. Ignored if present on update.
          example: testaccount
        type:
          type: string
          description: Type of zone. Valid values are PRIMARY, SECONDARY or ALIAS. Required for zone creation. Ignored if present on update.
          enum:
            - PRIMARY
            - SECONDARY
            - ALIAS
          example: PRIMARY
        dnssecStatus:
          type: string
          description: Whether or not the zone is signed with DNSSEC. Valid values are SIGNED or UNSIGNED. Returned in GET responses for zone information. Ignored if present on create or update.
          enum:
            - SIGNED
            - UNSIGNED
          example: UNSIGNED
        digicertEnabled:
          type: boolean
          description: Indicates whether the zone is visible to DigiCert CertCentral, allowing them to automatically manage Domain Validations. True = enabled, False = disabled (default). Not available for Alias, Secondary, or Suspended zones. This field will only be displayed if the digicert_enabled feature is enabled and active.
          example: true
        owner:
          type: string
          description: Name of the user that created the zone. Returned in GET responses for zone information. Ignored if present on create or update.
          example: team
        recordCount:
          type: integer
          description: Number of records in the zone. Returned in GET responses for zone information. Ignored if present on create or update.
          example: 15
        lastModifiedDateTime:
          type: string
          format: date-time
          description: The last date and time the zone was modified, represented in ISO8601 format. Returned in GET responses for zone information. Ignored if present on create or update.
          example: '2025-02-20T08:40:00Z'
        ultra2:
          type: boolean
          description: Only applicable to accounts that have enabled the UltraDNS2 service. Indicates if the zone has UltraDNS2 enabled or not. Valid values are false and true. Returned in GET responses for zone information.
          example: true
    RestrictIP:
      type: object
      description: Each Restrict IP DTO holds the IP addresses that are allowed to transfer Primary Zones out using the Zone Transfer protocol (AXFR/IXFR). Only one format should be specified in the DTO at a time (range, CIDR or single IP).
      properties:
        startIP:
          type: string
          description: The start of the IP range that is allowed to transfer this primary zone out using zone transfer protocol. IPv4 or IPv6 address.
          format: ipv4
          example: 192.168.1.1
        endIP:
          type: string
          description: The end of the IP range that is allowed to transfer this primary zone out using zone transfer protocol. IPv4 or IPv6 address.
          format: ipv4
          example: 192.168.1.254
        cidr:
          type: string
          description: The IP ranges specified in CIDR (e.g. 1.1.1.1/30, ::10/126)
          pattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$|^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}(\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))$
          example: 192.168.1.0/24
        singleIP:
          type: string
          description: The IP that is allowed to transfer this primary zone out using zone transfer protocol. IPv4 or IPv6 address.
          format: ipv4
          example: 192.168.1.100
        comment:
          type: string
          description: A description of this range of IP addresses. Optional.
          example: Office network range
      anyOf:
        - required:
            - startIP
            - endIP
        - required:
            - cidr
        - required:
            - singleIP
      not:
        allOf:
          - required:
              - startIP
              - endIP
          - required:
              - cidr
          - required:
              - singleIP
    NameServerIPList:
      type: object
      description: The Name Server IP List DTO lists the Primary Name Servers for a Secondary Zone
      properties:
        nameServerIpList:
          type: object
          description: List of name server IPs with their TSIG configurations
          properties:
            nameServerIP1:
              type: object
              description: The primary name server for the source zone
              properties:
                ip:
                  type: string
                  description: The IP address of the primary name server for the source zone. IPv4 or IPv6 address. Required for creation or update of a secondary zone.
                  format: ipv4
                  example: 192.168.1.10
                tsigKey:
                  type: string
                  description: If TSIG is enabled for this name server, the name of the TSIG key. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  example: tsig-key-1
                tsigKeyValue:
                  type: string
                  description: If TSIG is enabled for this name server, the TSIG key's value. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  example: base64-encoded-secret-1
                tsigAlgorithm:
                  type: string
                  description: The hash algorithm used to generate the TSIG key. Default is hmac-md5. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  enum:
                    - hmac-md5
                    - hmac-sha1
                    - hmac-sha224
                    - hmac-sha256
                    - hmac-sha384
                    - hmac-sha512
                  default: hmac-md5
                  example: hmac-sha256
              required:
                - ip
            nameServerIP2:
              type: object
              description: The first backup name server for the source zone
              properties:
                ip:
                  type: string
                  description: The IP address of the first backup name server for the source zone. IPv4 or IPv6 address. Optional for creation or update of a secondary zone.
                  format: ipv4
                  example: 192.168.1.11
                tsigKey:
                  type: string
                  description: If TSIG is enabled for this name server, the name of the TSIG key. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  example: tsig-key-2
                tsigKeyValue:
                  type: string
                  description: If TSIG is enabled for this name server, the TSIG key's value. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  example: base64-encoded-secret-2
                tsigAlgorithm:
                  type: string
                  description: The hash algorithm used to generate the TSIG key. Default is hmac-md5. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  enum:
                    - hmac-md5
                    - hmac-sha1
                    - hmac-sha224
                    - hmac-sha256
                    - hmac-sha384
                    - hmac-sha512
                  default: hmac-md5
                  example: hmac-sha256
            nameServerIP3:
              type: object
              description: The second backup name server for the source zone
              properties:
                ip:
                  type: string
                  description: The IP address of the second backup name server for the source zone. IPv4 or IPv6 address. Optional for creation or update of a secondary zone.
                  format: ipv4
                  example: 192.168.1.12
                tsigKey:
                  type: string
                  description: If TSIG is enabled for this name server, the name of the TSIG key. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  example: tsig-key-3
                tsigKeyValue:
                  type: string
                  description: If TSIG is enabled for this name server, the TSIG key's value. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  example: base64-encoded-secret-3
                tsigAlgorithm:
                  type: string
                  description: The hash algorithm used to generate the TSIG key. Default is hmac-md5. Required for creation or update of a secondary zone if TSIG is enabled for this name server.
                  enum:
                    - hmac-md5
                    - hmac-sha1
                    - hmac-sha224
                    - hmac-sha256
                    - hmac-sha384
                    - hmac-sha512
                  default: hmac-md5
                  example: hmac-sha256
          required:
            - nameServerIP1
          example:
            nameServerIP1:
              ip: 192.168.1.10
              tsigKey: primary-tsig-key
              tsigKeyValue: base64-encoded-secret
              tsigAlgorithm: hmac-sha256
            nameServerIP2:
              ip: 192.168.1.11
              tsigKey: backup-tsig-key
              tsigKeyValue: base64-encoded-backup-secret
              tsigAlgorithm: hmac-sha256
    RegistrarInfo:
      type: object
      description: The Registrar Info DTO holds the domain name registry information for a Primary Zone
      properties:
        registrar:
          type: string
          description: The name of the domain registrar
          example: GoDaddy
        whoisExpiration:
          type: string
          format: date
          description: The date when the domain name registration expires
          example: '2025-12-31'
        nameServers:
          type: object
          description: Name server configuration status for this domain
          properties:
            ok:
              type: array
              items:
                type: string
              description: List of UltraDNS name servers that are configured for this domain
              example:
                - pdns1.ultradns.net.
                - pdns2.ultradns.net.
                - pdns3.ultradns.org.
            unknown:
              type: array
              items:
                type: string
              description: List of name servers that are configured for this domain, but are not UltraDNS-managed name servers
              example:
                - ns1.example.com.
                - ns2.example.com.
            missing:
              type: array
              items:
                type: string
              description: List of UltraDNS name servers that should be configured for this domain, but are not
              example:
                - pdns4.ultradns.org.
                - pdns5.ultradns.info.
                - pdns6.ultradns.co.uk.
            incorrect:
              type: array
              items:
                type: string
              description: List of any obsolete UltraDNS name servers that are still configured for this zone
              example:
                - obsolete1.ultradns.net.
                - obsolete2.ultradns.net.
          example:
            ok:
              - pdns1.ultradns.net.
              - pdns2.ultradns.net.
              - pdns3.ultradns.org.
            missing:
              - pdns4.ultradns.org.
              - pdns5.ultradns.info.
              - pdns6.ultradns.co.uk.
    TSIG:
      type: object
      description: The TSIG DTO holds TSIG information for the Primary Zone
      properties:
        tsigKeyName:
          type: string
          description: The name of the TSIG key for the zone. REQUIRED.
          example: zone-tsig-key
        tsigKeyValue:
          type: string
          description: The value of the TSIG key for the zone. REQUIRED.
          example: base64-encoded-tsig-secret
        description:
          type: string
          description: A description of this key. Optional.
          example: TSIG key for zone transfers
        tsigAlgorithm:
          type: string
          description: The hash algorithm used to generate the TSIG key. REQUIRED.
          enum:
            - hmac-md5
            - hmac-sha1
            - hmac-sha224
            - hmac-sha256
            - hmac-sha384
            - hmac-sha512
          example: hmac-sha256
      required:
        - tsigKeyName
        - tsigKeyValue
        - tsigAlgorithm
    NotifyAddress:
      type: object
      description: Each Notify Address DTO defines an address that gets notified when there are updates to a Primary Zone
      properties:
        notifyAddress:
          type: string
          description: The IP address that is notified when the primary zone is updated. IPv4 address. REQUIRED.
          format: ipv4
          example: 192.168.1.100
        description:
          type: string
          description: A description of this address. Optional.
          example: Primary DNS server notification address
      required:
        - notifyAddress
    TransferStatusDetails:
      type: object
      description: The Transfer Status Details contains the Zone Transfer Status Details
      properties:
        lastRefresh:
          type: string
          format: date-time
          description: Displays when the last transfer attempt or refresh was. Date/Time formatted in ISO 8601 format, UTC offset based on customer-specified time zone
          example: '2025-02-20T08:40:00Z'
        nextRefresh:
          type: string
          format: date-time
          description: Displays when the next transfer attempt or refresh is. Date/Time formatted in ISO 8601 format, UTC offset based on customer-specified time zone
          example: '2025-02-20T09:40:00Z'
        lastRefreshStatus:
          type: string
          description: Displays the status of the last transfer that was attempted
          enum:
            - IN_PROGRESS
            - FAILED
            - SUCCESSFUL
          example: SUCCESSFUL
        lastRefreshStatusMessage:
          type: string
          description: Displays the last transfer's status message. This is currently shown as failure reason.
          example: Transfer completed successfully
    RRSetProfile:
      type: object
      description: |
        Profile object for UltraDNS pool configurations. Contains pool-specific attributes that define
        how DNS records should be handled and returned.

        Different types of profiles have different object layouts and attributes. The profile type is 
        identified by the "@context" field.

        **For RD Pool profiles**, the following structure is used:
        - **@context**: Must be "http://schemas.ultradns.com/RDPool.jsonschema"
        - **order**: One of FIXED, RANDOM, or ROUND_ROBIN
        - **description**: Optional description (max 255 characters)

        **RD Pool Ordering Options:**
        - **FIXED**: Records appear in the same order all the time
        - **RANDOM**: Order of the records is random on each request  
        - **ROUND_ROBIN**: The order of the records changes on each request, in order

        **Important Constraints for RD Pools:**
        - RD Pools can only be defined for RRSets of type A (1) or AAAA (28)
        - Multiple A or AAAA records for a single owner can only be defined if the owner is a pool
        - It is legal to define an RD Pool with zero or one Rdata records
      properties:
        '@context':
          type: string
          description: URI that uniquely identifies the type of the pool
          example: http://schemas.ultradns.com/RDPool.jsonschema
        order:
          type: string
          description: The order the records will be returned in (for RD Pools)
          enum:
            - FIXED
            - RANDOM
            - ROUND_ROBIN
          example: ROUND_ROBIN
        description:
          type: string
          maxLength: 255
          description: |
            An optional description of the pool.

            If not specified for RD Pools, the owner name for the RRSet will be used.
          example: Load balancing pool for web servers
      additionalProperties: true
      examples:
        rd_pool_fixed:
          summary: RD Pool with Fixed Ordering
          description: RD Pool that returns records in the same order every time
          value:
            '@context': http://schemas.ultradns.com/RDPool.jsonschema
            order: FIXED
            description: Fixed order pool for consistent routing
        rd_pool_random:
          summary: RD Pool with Random Ordering
          description: RD Pool that returns records in random order on each request
          value:
            '@context': http://schemas.ultradns.com/RDPool.jsonschema
            order: RANDOM
            description: Random distribution for load balancing
        rd_pool_round_robin:
          summary: RD Pool with Round Robin Ordering
          description: RD Pool that cycles through records in order on each request
          value:
            '@context': http://schemas.ultradns.com/RDPool.jsonschema
            order: ROUND_ROBIN
            description: Round robin distribution pool
        minimal_rd_pool:
          summary: Minimal RD Pool Configuration
          description: RD Pool with only required fields specified
          value:
            '@context': http://schemas.ultradns.com/RDPool.jsonschema
            order: RANDOM
  responses:
    Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorGeneric'
    Error5xx:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorGeneric'
    Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorGeneric'
    Error404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorGeneric'
    NoContentGeneric:
      description: No Content
      content:
        application/json:
          schema:
            type: object
            properties: {}
          examples:
            NoContent:
              value: {}
    Error400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorGeneric'
    CreatedGeneric:
      description: Created
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Successful
          examples:
            Created:
              value:
                message: Successful
    AcceptedGeneric:
      description: Accepted
      headers:
        X-Task-Id:
          description: Task ID for tracking the operation progress
          schema:
            type: string
            example: task-12345
      content:
        application/json:
          schema:
            type: object
            properties: {}
          examples:
            Accepted:
              value: {}
  parameters:
    QueryParams:
      name: q
      in: query
      required: false
      schema:
        type: string
    Offset:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      description: The position in the list for the first returned element (0 based). The default value is 0.
    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 100
      description: Maximum number of items to return per page
    TaskSort:
      name: sort
      in: query
      schema:
        type: string
        enum:
          - CODE
          - CONTENT_TYPE
          - EXTENSIONS
          - HAS_DATA
          - DATE
        default: CODE
      description: The sort column used to order the list. Valid sort fields are CODE, CONTENT_TYPE, EXTENSIONS, HAS_DATA, DATE. The default value is CODE.
    Reverse:
      name: reverse
      in: query
      schema:
        type: boolean
        default: false
      description: Whether to reverse the sort order
    TaskType:
      name: taskType
      in: query
      required: false
      schema:
        type: string
        enum:
          - reporting
      description: For viewing reporting tasks user needs to set its value to "reporting". By default only Rest API configurations tasks will be returned as per current functionality.
    TaskId:
      name: taskId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Task ID from x-task-id header
    Cursor:
      name: cursor
      in: query
      required: false
      schema:
        type: string
      description: |
        Cursor for pagination. Can be provided after the initial request to fetch the next, previous, first or last page(s) of results.
    Sort:
      name: sort
      in: query
      schema:
        type: string
      description: Field to sort results by
    ZoneName:
      name: zoneName
      in: path
      required: true
      schema:
        type: string
      description: The name of the DNS zone
    SystemGeneratedStatus:
      name: systemGeneratedStatus
      in: query
      required: false
      schema:
        type: boolean
        default: false
      description: |
        Used to indicate whether the records in rrdata are system generated or not. 
        Returns the systemGenerated attribute in an RRSet response.

        When set to `true`, the response will include a `systemGenerated` array that corresponds to each record in the `rdata` array, indicating whether each record was system generated or not.

        For Ultra2 enabled accounts, this may also return the `ultra2SystemGenerated` attribute for NS records.
      example: true
    RecordType:
      name: recordType
      in: path
      required: true
      schema:
        type: string
        pattern: ^(A|AAAA|APEXALIAS|CAA|CNAME|DS|HINFO|HTTPS|MX|NAPTR|NS|PTR|RP|SPF|SRV|SVCB|SSHFP|TLSA|TXT|ANY|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-5][0-9][0-9][0-9]|6[0-4][0-9][0-9]|65[0-4][0-9]|655[0-2][0-9]|6553[0-5])$
      description: |
        The DNS record type. Can be specified as either:

        - **Record name** (e.g., A, TXT, AAAA, SRV)
        - **Record type number** (e.g., 1, 16, 28, 33)
        - **ANY** - Special reserved word that returns all RRSets for the specified owner name

        For a complete list of supported record types, see the main API documentation.
      example: A
    OwnerName:
      name: ownerName
      in: path
      required: true
      schema:
        type: string
      description: |
        The owner name of the RRSet. Can be either:

        - **Relative Domain Name**: Does not include the zone name (e.g., `test`, `www`, `mail`)
        - **Fully Qualified Domain Name (FQDN)**: Includes the zone name (e.g., `test.domain.com.`, `www.domain.com.`)

        **Important Notes:**

        - When the owner name is specified as part of the URI, the search will return only the RRSets for the owner name that exactly matches the specified name
        - Using a query parameter with an owner name is automatically a string-match search; it will return all owner names that contain the specified string
        - Owner names ending with a dot (.) are considered FQDNs
        - Owner names without a trailing dot are considered relative to the zone

        **Examples:**
        - `test` - Relative name (will match `test.domain.com.`)
        - `test.domain.com.` - FQDN (absolute name)
        - `www` - Relative name (will match `www.domain.com.`)
        - `mail.domain.com.` - FQDN (absolute name)
      example: test
    AccountName:
      name: accountName
      in: path
      required: true
      schema:
        type: string
      description: The name of the account
    SettingName:
      name: settingName
      in: path
      required: true
      schema:
        type: string
        enum:
          - ZONE_TRANSFER_NOTIFICATION
          - SERVICE_NOTIFICATION
          - USAGE_NOTIFICATION
          - ZONE_USAGE_NOTIFICATION
          - PUSH_NOTIFICATIONS
          - SECURITY_PREFERENCES
          - sslCertPreferences
      description: The name of the account setting to configure
